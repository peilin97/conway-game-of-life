{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Cell.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleCell, selectGrid, selectCellWidth, selectCellHeight } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectDeadColor, selectLivingColor, selectHeatMap, selectColorGradientArray } from '../color/colorSlice';\n\nfunction debounce(fn, ms) {\n  let timer;\n  return _ => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn.apply(this, arguments);\n    }, ms);\n  };\n}\n\nexport default function Cell(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const grid = useSelector(selectGrid);\n  const cellWidth = useSelector(selectCellWidth);\n  const cellHeight = useSelector(selectCellHeight);\n  const start = useSelector(selectStart);\n  const livingColor = useSelector(selectLivingColor);\n  const deadColor = useSelector(selectDeadColor);\n  const heatMap = useSelector(selectHeatMap);\n  const colorGradientArray = useSelector(selectColorGradientArray); // const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  // const [cellWidth, setCellWidth] = useState((windowWidth*0.4 / width).toFixed(2));\n  // const [cellHeight, setCellHeight] = useState((windowWidth*0.4 / height).toFixed(2));\n  // const [sizeStyle, setSizeStyle] = useState({\n  //     width: `${cellWidth}px`,\n  //     height: `${cellHeight}px`,\n  // });\n\n  const sizeStyle = {\n    width: `${cellWidth}px`,\n    height: `${cellHeight}px`\n  }; // useEffect(() => {\n  //     function handleResize() {\n  //         setWindowWidth(window.innerWidth);\n  //         if (isLG) {\n  //             setCellWidth(computeCellLength(700, width));\n  //             setCellHeight(computeCellLength(700, height));\n  //         } else if (isMD) {\n  //             setCellWidth(computeCellLength(600, width));\n  //             setCellHeight(computeCellLength(600, height));\n  //         } else if (isSM) {\n  //             setCellWidth(computeCellLength(500, width));\n  //             setCellHeight(computeCellLength(500, height));\n  //         } else if (isXS) {\n  //             setCellWidth(computeCellLength(400, width));\n  //             setCellHeight(computeCellLength(400, height));\n  //         } else if (isPhone) {\n  //             setCellWidth(computeCellLength(300, width));\n  //             setCellHeight(computeCellLength(300, height));\n  //         }\n  //         setSizeStyle({\n  //             width: `${cellWidth}px`,\n  //             height: `${cellHeight}px`,\n  //         })\n  //     }\n  //     window.addEventListener('resize', handleResize);\n  //     return _=> {\n  //         window.removeEventListener('resize', handleResize)\n  //     };\n  // });\n  // const computeCellLength = (gridLength, num) => (gridLength / num).toFixed(2);\n\n  let colorStyle = {};\n\n  function addLifeStatus() {\n    if (grid[props.pos[0]][props.pos[1]] === 1) {\n      colorStyle.backgroundColor = `${livingColor}`;\n    } else if (!heatMap) {\n      colorStyle.backgroundColor = `${deadColor}`;\n    } else {\n      // build heat map for dead cells\n      let val = -Number(grid[props.pos[0]][props.pos[1]]);\n      colorStyle.backgroundColor = `${colorGradientArray[Number(val + 1)]}`;\n    }\n  }\n\n  addLifeStatus();\n\n  function clickCell() {\n    if (!start) {\n      dispatch(toggleCell(props.pos));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gridCol\",\n    style: { ...sizeStyle,\n      ...colorStyle\n    },\n    onClick: () => clickCell()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cell, \"na44sLI1GpZ5IPQ80eVIrOwb3og=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Cell.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","toggleCell","selectGrid","selectCellWidth","selectCellHeight","selectStart","selectDeadColor","selectLivingColor","selectHeatMap","selectColorGradientArray","debounce","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments","Cell","props","dispatch","grid","cellWidth","cellHeight","start","livingColor","deadColor","heatMap","colorGradientArray","sizeStyle","width","height","colorStyle","addLifeStatus","pos","backgroundColor","val","Number","clickCell"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    toggleCell,\n    selectGrid,\n    selectCellWidth,\n    selectCellHeight,\n} from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport {\n    selectDeadColor,\n    selectLivingColor,\n    selectHeatMap,\n    selectColorGradientArray,\n} from '../color/colorSlice';\n\nfunction debounce(fn, ms) {\n    let timer\n    return _ => {\n      clearTimeout(timer)\n      timer = setTimeout(_ => {\n        timer = null\n        fn.apply(this, arguments)\n      }, ms)\n    };\n  }\n\nexport default function Cell(props) {\n    const dispatch = useDispatch();\n\n    const grid = useSelector(selectGrid);\n    const cellWidth = useSelector(selectCellWidth);\n    const cellHeight = useSelector(selectCellHeight);\n    const start = useSelector(selectStart);\n    const livingColor = useSelector(selectLivingColor);\n    const deadColor = useSelector(selectDeadColor);\n    const heatMap = useSelector(selectHeatMap);\n    const colorGradientArray = useSelector(selectColorGradientArray);\n\n    // const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n    // const [cellWidth, setCellWidth] = useState((windowWidth*0.4 / width).toFixed(2));\n    // const [cellHeight, setCellHeight] = useState((windowWidth*0.4 / height).toFixed(2));\n    // const [sizeStyle, setSizeStyle] = useState({\n    //     width: `${cellWidth}px`,\n    //     height: `${cellHeight}px`,\n    // });\n    const sizeStyle = {\n             width: `${cellWidth}px`,\n            height: `${cellHeight}px`,\n    };\n\n    // useEffect(() => {\n    //     function handleResize() {\n    //         setWindowWidth(window.innerWidth);\n    //         if (isLG) {\n    //             setCellWidth(computeCellLength(700, width));\n    //             setCellHeight(computeCellLength(700, height));\n    //         } else if (isMD) {\n    //             setCellWidth(computeCellLength(600, width));\n    //             setCellHeight(computeCellLength(600, height));\n    //         } else if (isSM) {\n    //             setCellWidth(computeCellLength(500, width));\n    //             setCellHeight(computeCellLength(500, height));\n    //         } else if (isXS) {\n    //             setCellWidth(computeCellLength(400, width));\n    //             setCellHeight(computeCellLength(400, height));\n    //         } else if (isPhone) {\n    //             setCellWidth(computeCellLength(300, width));\n    //             setCellHeight(computeCellLength(300, height));\n    //         }\n    //         setSizeStyle({\n    //             width: `${cellWidth}px`,\n    //             height: `${cellHeight}px`,\n    //         })\n    //     }\n        \n    //     window.addEventListener('resize', handleResize);\n    //     return _=> {\n    //         window.removeEventListener('resize', handleResize)\n    //     };\n    // });\n\n    // const computeCellLength = (gridLength, num) => (gridLength / num).toFixed(2);\n\n    let colorStyle = {}\n\n    function addLifeStatus() {\n        if (grid[props.pos[0]][props.pos[1]] === 1) {\n            colorStyle.backgroundColor = `${livingColor}`;\n        } else if (!heatMap) {\n            colorStyle.backgroundColor = `${deadColor}`;\n        } else {\n            // build heat map for dead cells\n            let val = -Number(grid[props.pos[0]][props.pos[1]]);\n            colorStyle.backgroundColor = `${\n                colorGradientArray[Number(val + 1)]\n            }`;\n        }\n    }\n    addLifeStatus();\n\n    function clickCell() {\n        if (!start) {\n            dispatch(toggleCell(props.pos));\n        }\n    }\n\n    return (\n        <div\n            className=\"gridCol\"\n            style={{...sizeStyle, ...colorStyle}}\n            onClick={() => clickCell()}></div>\n      \n    );\n}\n"]},"metadata":{},"sourceType":"module"}