{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectGrid, selectWidth, selectHeight, updateGridAndNeighbors } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectSpeed } from '../speed/speedSlice';\nimport Cell from './Cell';\nimport './grid.css';\nexport default function Grid() {\n  _s();\n\n  const isLG = useMediaQuery({\n    query: '(min-device-width: 1200px)'\n  });\n  const isMD = useMediaQuery({\n    query: '(min-device-width: 992px)'\n  });\n  const isSM = useMediaQuery({\n    query: '(min-device-width: 768px)'\n  });\n  const isXS = useMediaQuery({\n    query: '(min-device-width: 500px)'\n  }); // const isPhone = useMediaQuery({\n  //     query: '(max-device-width: 400px)'\n  // });\n\n  const grid = useSelector(selectGrid);\n  const start = useSelector(selectStart);\n  const speed = useSelector(selectSpeed);\n  const width = useSelector(selectWidth);\n  const height = useSelector(selectHeight);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [cellWidth, setCellWidth] = useState((windowWidth * 0.4 / width).toFixed(2));\n  const [cellHeight, setCellHeight] = useState((windowWidth * 0.4 / height).toFixed(2));\n  const [sizeStyle, setSizeStyle] = useState({\n    width: `${cellWidth}px`,\n    height: `${cellHeight}px`\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (start) {\n        dispatch(updateGridAndNeighbors());\n      }\n    }, Number(speed));\n\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n\n      if (isLG) {\n        setCellWidth(computeCellLength(700, width));\n        setCellHeight(computeCellLength(700, height));\n      } else if (isMD) {\n        setCellWidth(computeCellLength(600, width));\n        setCellHeight(computeCellLength(600, height));\n      } else if (isSM) {\n        setCellWidth(computeCellLength(500, width));\n        setCellHeight(computeCellLength(500, height));\n      } else if (isXS) {\n        setCellWidth(computeCellLength(400, width));\n        setCellHeight(computeCellLength(400, height));\n      } else {\n        setCellWidth(computeCellLength(300, width));\n        setCellHeight(computeCellLength(300, height));\n      }\n\n      setSizeStyle({\n        width: `${cellWidth}px`,\n        height: `${cellHeight}px`\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return _ => {\n      clearTimeout(timer);\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  const computeCellLength = (gridLength, num) => (gridLength / num).toFixed(2);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flexRow\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gridContainer\",\n      children: grid.map(function (row, rowId) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gridRow\",\n          children: row.map((val, colId) => /*#__PURE__*/_jsxDEV(Cell, {\n            pos: [rowId, colId],\n            sizeStyle: sizeStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"eHyjh1N5LwzLSCm5FKShasgIH44=\", false, function () {\n  return [useMediaQuery, useMediaQuery, useMediaQuery, useMediaQuery, useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Grid.jsx"],"names":["React","useEffect","useState","useMediaQuery","useDispatch","useSelector","selectGrid","selectWidth","selectHeight","updateGridAndNeighbors","selectStart","selectSpeed","Cell","Grid","isLG","query","isMD","isSM","isXS","grid","start","speed","width","height","windowWidth","setWindowWidth","window","innerWidth","cellWidth","setCellWidth","toFixed","cellHeight","setCellHeight","sizeStyle","setSizeStyle","dispatch","timer","setTimeout","Number","handleResize","computeCellLength","addEventListener","_","clearTimeout","removeEventListener","gridLength","num","map","row","rowId","val","colId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    selectGrid,\n    selectWidth,\n    selectHeight,\n    updateGridAndNeighbors,\n} from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectSpeed } from '../speed/speedSlice';\nimport Cell from './Cell';\nimport './grid.css';\n\nexport default function Grid() {\n    const isLG = useMediaQuery({\n        query: '(min-device-width: 1200px)'\n    });\n    const isMD = useMediaQuery({\n        query: '(min-device-width: 992px)'\n    });\n    const isSM = useMediaQuery({\n        query: '(min-device-width: 768px)'\n    });\n    const isXS = useMediaQuery({\n        query: '(min-device-width: 500px)'\n    });\n    // const isPhone = useMediaQuery({\n    //     query: '(max-device-width: 400px)'\n    // });\n\n    const grid = useSelector(selectGrid);\n    const start = useSelector(selectStart);\n    const speed = useSelector(selectSpeed);\n    const width = useSelector(selectWidth);\n    const height = useSelector(selectHeight);\n\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n    const [cellWidth, setCellWidth] = useState((windowWidth*0.4 / width).toFixed(2));\n    const [cellHeight, setCellHeight] = useState((windowWidth*0.4 / height).toFixed(2));\n    const [sizeStyle, setSizeStyle] = useState({\n        width: `${cellWidth}px`,\n        height: `${cellHeight}px`,\n    });\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            if (start) {\n                dispatch(updateGridAndNeighbors());\n            }\n        }, Number(speed));\n        const handleResize = () => {\n            setWindowWidth(window.innerWidth);\n            if (isLG) {\n                setCellWidth(computeCellLength(700, width));\n                setCellHeight(computeCellLength(700, height));\n            } else if (isMD) {\n                setCellWidth(computeCellLength(600, width));\n                setCellHeight(computeCellLength(600, height));\n            } else if (isSM) {\n                setCellWidth(computeCellLength(500, width));\n                setCellHeight(computeCellLength(500, height));\n            } else if (isXS) {\n                setCellWidth(computeCellLength(400, width));\n                setCellHeight(computeCellLength(400, height));\n            } else {\n                setCellWidth(computeCellLength(300, width));\n                setCellHeight(computeCellLength(300, height));\n            }\n            setSizeStyle({\n                width: `${cellWidth}px`,\n                height: `${cellHeight}px`,\n            });\n        };\n        window.addEventListener('resize', handleResize);\n        return _ => {\n            clearTimeout(timer);\n            window.removeEventListener('resize', handleResize);\n        };\n    });\n\n    const computeCellLength = (gridLength, num) => (gridLength / num).toFixed(2);\n\n\n    return (\n        <div className=\"flexRow\">\n            <div className=\"gridContainer\">\n                {grid.map(function (row, rowId) {\n                    return (\n                        <div className=\"gridRow\">\n                            {row.map((val, colId) => (\n                                <Cell pos={[rowId, colId]} sizeStyle={sizeStyle}/>\n                            ))}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}