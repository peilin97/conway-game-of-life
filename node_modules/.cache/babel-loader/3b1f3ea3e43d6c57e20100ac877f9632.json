{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectGrid, selectWidth, selectHeight, updateGridAndNeighbors } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectSpeed } from '../speed/speedSlice';\nimport Cell from './Cell';\nimport './grid.css';\nexport default function Grid() {\n  _s();\n\n  const isLG = useMediaQuery({\n    query: '(min-device-width: 1200px)'\n  });\n  const isMD = useMediaQuery({\n    query: '(min-device-width: 992px)'\n  });\n  const isSM = useMediaQuery({\n    query: '(min-device-width: 768px)'\n  });\n  const isXS = useMediaQuery({\n    query: '(min-device-width: 500px)'\n  }); // const isPhone = useMediaQuery({\n  //     query: '(max-device-width: 400px)'\n  // });\n\n  const grid = useSelector(selectGrid);\n  const start = useSelector(selectStart);\n  const speed = useSelector(selectSpeed);\n  const width = useSelector(selectWidth);\n  const height = useSelector(selectHeight); // const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  const [cellWidth, setCellWidth] = useState((setLength() / width).toFixed(2));\n  const [cellHeight, setCellHeight] = useState((setLength() / height).toFixed(2));\n  const [sizeStyle, setSizeStyle] = useState({\n    width: `${cellWidth}px`,\n    height: `${cellHeight}px`\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (start) {\n        dispatch(updateGridAndNeighbors());\n      }\n    }, Number(speed));\n\n    const handleResize = () => {\n      // setWindowWidth(window.innerWidth);\n      let gridLength = setLength(width, height);\n      setCellWidth(computeCellLength(gridLength, width));\n      setCellHeight(computeCellLength(gridLength, height));\n      setSizeStyle({\n        width: `${cellWidth}px`,\n        height: `${cellHeight}px`\n      }); // if (isLG) {\n      //     setCellWidth(computeCellLength(700, width));\n      //     setCellHeight(computeCellLength(700, height));\n      // } else if (isMD) {\n      //     setCellWidth(computeCellLength(600, width));\n      //     setCellHeight(computeCellLength(600, height));\n      // } else if (isSM) {\n      //     setCellWidth(computeCellLength(500, width));\n      //     setCellHeight(computeCellLength(500, height));\n      // } else if (isXS) {\n      //     setCellWidth(computeCellLength(400, width));\n      //     setCellHeight(computeCellLength(400, height));\n      // } else {\n      //     setCellWidth(computeCellLength(300, width));\n      //     setCellHeight(computeCellLength(300, height));\n      // }\n      // setSizeStyle({\n      //     width: `${cellWidth}px`,\n      //     height: `${cellHeight}px`,\n      // });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return _ => {\n      clearTimeout(timer);\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  const setLength = () => {\n    let gridLength;\n\n    if (isLG) {\n      gridLength = 700;\n    } else if (isMD) {\n      gridLength = 600;\n    } else if (isSM) {\n      gridLength = 500;\n    } else if (isXS) {\n      gridLength = 400;\n    } else {\n      gridLength = 300;\n    }\n\n    return gridLength;\n  };\n\n  const computeCellLength = (gridLength, num) => (gridLength / num).toFixed(2);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flexRow\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gridContainer\",\n      children: grid.map(function (row, rowId) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gridRow\",\n          children: row.map((val, colId) => /*#__PURE__*/_jsxDEV(Cell, {\n            pos: [rowId, colId],\n            sizeStyle: sizeStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"pU0yzla8VCoBP3OGi+/EQG5YWQw=\", false, function () {\n  return [useMediaQuery, useMediaQuery, useMediaQuery, useMediaQuery, useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Grid.jsx"],"names":["React","useEffect","useState","useMediaQuery","useDispatch","useSelector","selectGrid","selectWidth","selectHeight","updateGridAndNeighbors","selectStart","selectSpeed","Cell","Grid","isLG","query","isMD","isSM","isXS","grid","start","speed","width","height","cellWidth","setCellWidth","setLength","toFixed","cellHeight","setCellHeight","sizeStyle","setSizeStyle","dispatch","timer","setTimeout","Number","handleResize","gridLength","computeCellLength","window","addEventListener","_","clearTimeout","removeEventListener","num","map","row","rowId","val","colId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    selectGrid,\n    selectWidth,\n    selectHeight,\n    updateGridAndNeighbors,\n} from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectSpeed } from '../speed/speedSlice';\nimport Cell from './Cell';\nimport './grid.css';\n\nexport default function Grid() {\n    const isLG = useMediaQuery({\n        query: '(min-device-width: 1200px)'\n    });\n    const isMD = useMediaQuery({\n        query: '(min-device-width: 992px)'\n    });\n    const isSM = useMediaQuery({\n        query: '(min-device-width: 768px)'\n    });\n    const isXS = useMediaQuery({\n        query: '(min-device-width: 500px)'\n    });\n    // const isPhone = useMediaQuery({\n    //     query: '(max-device-width: 400px)'\n    // });\n\n    const grid = useSelector(selectGrid);\n    const start = useSelector(selectStart);\n    const speed = useSelector(selectSpeed);\n    const width = useSelector(selectWidth);\n    const height = useSelector(selectHeight);\n\n    // const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n    const [cellWidth, setCellWidth] = useState((setLength() / width).toFixed(2));\n    const [cellHeight, setCellHeight] = useState((setLength() / height).toFixed(2));\n    const [sizeStyle, setSizeStyle] = useState({\n        width: `${cellWidth}px`,\n        height: `${cellHeight}px`,\n    });\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            if (start) {\n                dispatch(updateGridAndNeighbors());\n            }\n        }, Number(speed));\n        const handleResize = () => {\n            // setWindowWidth(window.innerWidth);\n            let gridLength = setLength(width, height);\n            setCellWidth(computeCellLength(gridLength, width));\n            setCellHeight(computeCellLength(gridLength, height));\n            setSizeStyle({\n                width: `${cellWidth}px`,\n                height: `${cellHeight}px`,\n            });\n            // if (isLG) {\n            //     setCellWidth(computeCellLength(700, width));\n            //     setCellHeight(computeCellLength(700, height));\n            // } else if (isMD) {\n            //     setCellWidth(computeCellLength(600, width));\n            //     setCellHeight(computeCellLength(600, height));\n            // } else if (isSM) {\n            //     setCellWidth(computeCellLength(500, width));\n            //     setCellHeight(computeCellLength(500, height));\n            // } else if (isXS) {\n            //     setCellWidth(computeCellLength(400, width));\n            //     setCellHeight(computeCellLength(400, height));\n            // } else {\n            //     setCellWidth(computeCellLength(300, width));\n            //     setCellHeight(computeCellLength(300, height));\n            // }\n            // setSizeStyle({\n            //     width: `${cellWidth}px`,\n            //     height: `${cellHeight}px`,\n            // });\n        };\n        window.addEventListener('resize', handleResize);\n        return _ => {\n            clearTimeout(timer);\n            window.removeEventListener('resize', handleResize);\n        };\n    });\n\n    const setLength = () => {\n        let gridLength;\n        if (isLG) {\n            gridLength = 700;\n        } else if (isMD) {\n            gridLength = 600;\n        } else if (isSM) {\n            gridLength = 500;\n        } else if (isXS) {\n            gridLength = 400;\n        } else {\n            gridLength = 300;\n        }\n        return gridLength;\n    };\n    const computeCellLength = (gridLength, num) => (gridLength / num).toFixed(2);\n\n\n    return (\n        <div className=\"flexRow\">\n            <div className=\"gridContainer\">\n                {grid.map(function (row, rowId) {\n                    return (\n                        <div className=\"gridRow\">\n                            {row.map((val, colId) => (\n                                <Cell pos={[rowId, colId]} sizeStyle={sizeStyle}/>\n                            ))}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}