{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Instruction.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Collapse from 'react-bootstrap/Collapse';\nimport parse from 'html-react-parser'; // const parser = require('html-react-parser');\n\nexport default function Instruction() {\n  _s();\n\n  const questions = [\"What is Conway's Game of Life?\", \"How does the game work?\", \"What are the rules of the game?\", \"What do the width and the height of the grid mean?\", \"About colors of living and dead cells\"];\n  const answers = ['<p>The Game of Life is a cellular-automaton,\\\n        zero player game, developed by John Conway in 1970.\\\n        The game is played on an infinite grid of square cells,\\\n        and its evolution is only determined by its initial state.\\\n        </p>\\\n        <p>reference: \\\n        <a href=\"http://web.mit.edu/sp.268/www/2010/lifeSlides.pdf\">\\\n        http://web.mit.edu/sp.268/www/2010/lifeSlides.pdf</a></p>', \"<p>Conway’s Game of Life (henceforth, <b>​Life</b>​) is based on a grid system.\\\n        Every individual location on the grid can be understood as a ​<b>cell</b>​.\\\n        The game, or simulation, occurs over iterations, or <b>generations</b>​.\\\n        After a generation, a cell may change from ​living​ or ​dead​ based\\\n        on how many <b>living</b> or <b>dead</b> neighbors it had in a previous iteration.\\\n        A <b>​neighbor</b>​ is any immediately adjacent spot on the grid\\\n        (horizontal, vertical or diagonal).\\\n        </p>\", \"<p>Life has 4 simple rules:</p>\\\n        <ol>\\\n            <li>A living cell with less than two living neighbours dies.</li>\\\n            <li>A living cell with two or three live neighbours lives.</li>\\\n            <li>A living cell with more than three live neighbours dies.</li>\\\n            <li>A dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\\\n        </ol>\", \"<p>\\\n            Width decides the number of cells on each row,\\\n            and height decides the number of celss on each column.\\\n            The maximum width or height you can set is 100,\\\n            and the minimum width or height you can set is 10.\\\n            In default, the width and the height are both 50.\\\n        </p>\", \"<p>\\\n        In default, dead cells are in white, and living cells are in black.\\\n        You have the option to change both of their colors when the game is not on.\\\n        </p>\"];\n  const initialOpens = [];\n\n  for (let i = 0; i < answers.length; i++) {\n    initialOpens.push(false);\n  }\n\n  const [opens, setOpens] = useState(initialOpens);\n\n  const handleOpen = id => {\n    let newOpens = [...opens];\n    newOpens[id] = !opens[id];\n    setOpens(newOpens);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"customJumbotron\",\n    children: questions.map(function (q, id) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"light\",\n          onClick: () => handleOpen(id),\n          \"aria-controls\": id,\n          \"aria-expanded\": opens[id],\n          children: parse(q)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n          in: opens[id],\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: id,\n            children: parse(answers[id])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Instruction, \"s53KwyEycVVhcMqvPE4cA9cRCq0=\");\n\n_c = Instruction;\n\nvar _c;\n\n$RefreshReg$(_c, \"Instruction\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Instruction.jsx"],"names":["React","useState","Button","Collapse","parse","Instruction","questions","answers","initialOpens","i","length","push","opens","setOpens","handleOpen","id","newOpens","map","q"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,KAAP,MAAkB,mBAAlB,C,CACA;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAClC,QAAMC,SAAS,GAAG,CACd,gCADc,EAEd,yBAFc,EAGd,iCAHc,EAId,oDAJc,EAKd,uCALc,CAAlB;AAOA,QAAMC,OAAO,GAAG,CACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,kEARoB,EASZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,aAhBoB,EAiBZ;AACR;AACA;AACA;AACA;AACA;AACA,cAvBoB,EAwBZ;AACR;AACA;AACA;AACA;AACA;AACA,aA9BoB,EA+BZ;AACR;AACA;AACA,aAlCoB,CAAhB;AAoCA,QAAMC,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGF,OAAO,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCD,IAAAA,YAAY,CAACG,IAAb,CAAkB,KAAlB;AACH;;AACD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAACO,YAAD,CAAlC;;AAEA,QAAMM,UAAU,GAAIC,EAAD,IAAQ;AACvB,QAAIC,QAAQ,GAAG,CAAC,GAAGJ,KAAJ,CAAf;AACAI,IAAAA,QAAQ,CAACD,EAAD,CAAR,GAAe,CAACH,KAAK,CAACG,EAAD,CAArB;AACAF,IAAAA,QAAQ,CAACG,QAAD,CAAR;AACH,GAJD;;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,cACKV,SAAS,CAACW,GAAV,CAAc,UAASC,CAAT,EAAYH,EAAZ,EAAgB;AAC3B,0BACI;AAAA,gCACI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,OAAhB;AACA,UAAA,OAAO,EAAE,MAAMD,UAAU,CAACC,EAAD,CADzB;AAEA,2BAAgBA,EAFhB;AAGA,2BAAeH,KAAK,CAACG,EAAD,CAHpB;AAAA,oBAKKX,KAAK,CAACc,CAAD;AALV;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI,QAAC,QAAD;AAAU,UAAA,EAAE,EAAEN,KAAK,CAACG,EAAD,CAAnB;AAAA,iCACI;AAAK,YAAA,EAAE,EAAEA,EAAT;AAAA,sBACKX,KAAK,CAACG,OAAO,CAACQ,EAAD,CAAR;AADV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAgBH,KAjBA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AA2CH;;GAnGuBV,W;;KAAAA,W","sourcesContent":["import React, { useState }from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Collapse from 'react-bootstrap/Collapse'\nimport parse from 'html-react-parser';\n// const parser = require('html-react-parser');\n\nexport default function Instruction() {\n    const questions = [\n        \"What is Conway's Game of Life?\",\n        \"How does the game work?\",\n        \"What are the rules of the game?\",\n        \"What do the width and the height of the grid mean?\",\n        \"About colors of living and dead cells\"\n    ]\n    const answers = [\n        '<p>The Game of Life is a cellular-automaton,\\\n        zero player game, developed by John Conway in 1970.\\\n        The game is played on an infinite grid of square cells,\\\n        and its evolution is only determined by its initial state.\\\n        </p>\\\n        <p>reference: \\\n        <a href=\"http://web.mit.edu/sp.268/www/2010/lifeSlides.pdf\">\\\n        http://web.mit.edu/sp.268/www/2010/lifeSlides.pdf</a></p>',\n        \"<p>Conway’s Game of Life (henceforth, <b>​Life</b>​) is based on a grid system.\\\n        Every individual location on the grid can be understood as a ​<b>cell</b>​.\\\n        The game, or simulation, occurs over iterations, or <b>generations</b>​.\\\n        After a generation, a cell may change from ​living​ or ​dead​ based\\\n        on how many <b>living</b> or <b>dead</b> neighbors it had in a previous iteration.\\\n        A <b>​neighbor</b>​ is any immediately adjacent spot on the grid\\\n        (horizontal, vertical or diagonal).\\\n        </p>\",\n        \"<p>Life has 4 simple rules:</p>\\\n        <ol>\\\n            <li>A living cell with less than two living neighbours dies.</li>\\\n            <li>A living cell with two or three live neighbours lives.</li>\\\n            <li>A living cell with more than three live neighbours dies.</li>\\\n            <li>A dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\\\n        </ol>\",\n        \"<p>\\\n            Width decides the number of cells on each row,\\\n            and height decides the number of celss on each column.\\\n            The maximum width or height you can set is 100,\\\n            and the minimum width or height you can set is 10.\\\n            In default, the width and the height are both 50.\\\n        </p>\",\n        \"<p>\\\n        In default, dead cells are in white, and living cells are in black.\\\n        You have the option to change both of their colors when the game is not on.\\\n        </p>\"\n    ]\n    const initialOpens = []\n    for (let i=0; i < answers.length; i++) {\n        initialOpens.push(false)\n    }\n    const [opens, setOpens] = useState(initialOpens)\n\n    const handleOpen = (id) => {\n        let newOpens = [...opens]\n        newOpens[id] = !opens[id]\n        setOpens(newOpens)\n    }\n\n    return (\n        <div className=\"customJumbotron\">\n            {questions.map(function(q, id) {\n                return (\n                    <div>\n                        <Button variant=\"light\"\n                        onClick={() => handleOpen(id)}\n                        aria-controls= {id}\n                        aria-expanded={opens[id]}\n                        >\n                            {parse(q)}\n                        </Button>\n                        <Collapse in={opens[id]}>\n                            <div id={id}>\n                                {parse(answers[id])}\n                            </div>\n                        </Collapse>\n                    </div>\n                )\n            })}\n\n            {/* <div>\n            <Button variant=\"light\"\n            onClick={() => setOpen2(!open2)}\n            aria-controls=\"q2\"\n            aria-expanded={open2}\n            >\n                What are the rules of the game?\n            </Button>\n            <Collapse in={open2}>\n            <div id=\"q2\">\n                <p>Life has 4 simple rules:</p>\n                <ol>\n                    <li>A living cell with less than two living neighbours dies.</li>\n                    <li>A living cell with two or three live neighbours lives.</li>\n                    <li>A living cell with more than three live neighbours dies.</li>\n                    <li>A dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\n                </ol>\n            </div>\n            </Collapse>\n            </div> */}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}