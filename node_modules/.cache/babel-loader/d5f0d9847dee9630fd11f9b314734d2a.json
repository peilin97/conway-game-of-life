{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Cell.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleCell, selectGrid, selectWidth, selectHeight } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectDeadColor, selectLivingColor, selectHeatMap, selectColorGradientArray } from '../color/colorSlice';\n\nfunction debounce(fn, ms) {\n  let timer;\n  return _ => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn.apply(this, arguments);\n    }, ms);\n  };\n}\n\nexport default function Cell(props) {\n  _s();\n\n  const isLargeScreen = useMediaQuery({\n    query: '(min-device-width: 1200px)'\n  });\n  const dispatch = useDispatch();\n  const grid = useSelector(selectGrid);\n  const width = useSelector(selectWidth);\n  const height = useSelector(selectHeight);\n  const start = useSelector(selectStart);\n  const livingColor = useSelector(selectLivingColor);\n  const deadColor = useSelector(selectDeadColor);\n  const heatMap = useSelector(selectHeatMap);\n  const colorGradientArray = useSelector(selectColorGradientArray);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [cellWidth, setCellWidth] = useState((windowWidth * 0.4 / width).toFixed(2));\n  const [cellHeight, setCellHeight] = useState((windowWidth * 0.4 / height).toFixed(2));\n  useEffect(() => {\n    function handleResize() {\n      setWindowWidth(window.innerWidth);\n\n      if (isLargeScreen) {\n        setCellWidth(computeCellLength(700, width));\n        setCellHeight(computeCellLength(700, height));\n      }\n    } // const debouncedHandleResize = debounce(function handleResize() {\n    //     setWindowWidth(window.innerWidth);\n    //     if (isLargeScreen) {\n    //         setCellWidth(computeCellLength(700, width));\n    //         setCellHeight(computeCellLength(700, height));\n    //     }\n    //   }, 1000);\n\n\n    window.addEventListener('resize', handleResize);\n    return _ => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  const computeCellLength = (gridLength, num) => (gridLength / num).toFixed(2); // const squareLength = Math.min(\n  //     (500 / width).toFixed(2),\n  //     (500 / height).toFixed(2)\n  // );\n\n\n  let colorStyle = {\n    width: `${cellWidth}px`,\n    height: `${cellHeight}px`\n  };\n\n  function addLifeStatus() {\n    if (grid[props.pos[0]][props.pos[1]] === 1) {\n      colorStyle.backgroundColor = `${livingColor}`;\n    } else if (!heatMap) {\n      colorStyle.backgroundColor = `${deadColor}`;\n    } else {\n      // build heat map for dead cells\n      let val = -Number(grid[props.pos[0]][props.pos[1]]);\n      colorStyle.backgroundColor = `${colorGradientArray[Number(val + 1)]}`;\n    }\n  }\n\n  addLifeStatus();\n\n  function clickCell() {\n    if (!start) {\n      dispatch(toggleCell(props.pos));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gridCol\",\n    style: colorStyle,\n    onClick: () => clickCell()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cell, \"Cl7B8Drm6saZNYOtXiGZSFAkaYk=\", false, function () {\n  return [useMediaQuery, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Cell.jsx"],"names":["React","useState","useEffect","useMediaQuery","useDispatch","useSelector","toggleCell","selectGrid","selectWidth","selectHeight","selectStart","selectDeadColor","selectLivingColor","selectHeatMap","selectColorGradientArray","debounce","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments","Cell","props","isLargeScreen","query","dispatch","grid","width","height","start","livingColor","deadColor","heatMap","colorGradientArray","windowWidth","setWindowWidth","window","innerWidth","cellWidth","setCellWidth","toFixed","cellHeight","setCellHeight","handleResize","computeCellLength","addEventListener","removeEventListener","gridLength","num","colorStyle","addLifeStatus","pos","backgroundColor","val","Number","clickCell"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleCell, selectGrid, selectWidth, selectHeight } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport {\n    selectDeadColor,\n    selectLivingColor,\n    selectHeatMap,\n    selectColorGradientArray,\n} from '../color/colorSlice';\n\nfunction debounce(fn, ms) {\n    let timer\n    return _ => {\n      clearTimeout(timer)\n      timer = setTimeout(_ => {\n        timer = null\n        fn.apply(this, arguments)\n      }, ms)\n    };\n  }\n\nexport default function Cell(props) {\n    const isLargeScreen = useMediaQuery({\n        query: '(min-device-width: 1200px)'\n    });\n\n    const dispatch = useDispatch();\n\n    const grid = useSelector(selectGrid);\n    const width = useSelector(selectWidth);\n    const height = useSelector(selectHeight);\n    const start = useSelector(selectStart);\n    const livingColor = useSelector(selectLivingColor);\n    const deadColor = useSelector(selectDeadColor);\n    const heatMap = useSelector(selectHeatMap);\n    const colorGradientArray = useSelector(selectColorGradientArray);\n\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n    const [cellWidth, setCellWidth] = useState((windowWidth*0.4 / width).toFixed(2));\n    const [cellHeight, setCellHeight] = useState((windowWidth*0.4 / height).toFixed(2));\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowWidth(window.innerWidth);\n            if (isLargeScreen) {\n                setCellWidth(computeCellLength(700, width));\n                setCellHeight(computeCellLength(700, height));\n            }\n          }\n        \n        // const debouncedHandleResize = debounce(function handleResize() {\n        //     setWindowWidth(window.innerWidth);\n        //     if (isLargeScreen) {\n        //         setCellWidth(computeCellLength(700, width));\n        //         setCellHeight(computeCellLength(700, height));\n        //     }\n        //   }, 1000);\n        window.addEventListener('resize', handleResize);\n        return _=> {\n            window.removeEventListener('resize', handleResize)\n        };\n    });\n\n    \n\n    const computeCellLength = (gridLength, num) => (gridLength / num).toFixed(2);\n    // const squareLength = Math.min(\n    //     (500 / width).toFixed(2),\n    //     (500 / height).toFixed(2)\n    // );\n\n    let colorStyle = {\n        width: `${cellWidth}px`,\n        height: `${cellHeight}px`,\n    };\n\n    function addLifeStatus() {\n        if (grid[props.pos[0]][props.pos[1]] === 1) {\n            colorStyle.backgroundColor = `${livingColor}`;\n        } else if (!heatMap) {\n            colorStyle.backgroundColor = `${deadColor}`;\n        } else {\n            // build heat map for dead cells\n            let val = -Number(grid[props.pos[0]][props.pos[1]]);\n            colorStyle.backgroundColor = `${\n                colorGradientArray[Number(val + 1)]\n            }`;\n        }\n    }\n    addLifeStatus();\n\n    function clickCell() {\n        if (!start) {\n            dispatch(toggleCell(props.pos));\n        }\n    }\n\n    return (\n        <div\n            className=\"gridCol\"\n            style={colorStyle}\n            onClick={() => clickCell()}></div>\n      \n    );\n}\n"]},"metadata":{},"sourceType":"module"}