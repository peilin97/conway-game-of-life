{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // import Container from 'react-bootstrap/Container'\n// import Row from 'react-bootstrap/Row'\n// import Col from 'react-bootstrap/Col'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWidth, selectHeight } from './sizeSlice';\nimport Cell from './Cell';\nexport default function Grid() {\n  _s();\n\n  const width = useSelector(selectWidth);\n  const height = useSelector(selectHeight);\n  const initialGrid = [];\n  const livingNeighbors = [];\n  const DIRECTIONS = [[0, 1], [1, 0], [0, -1], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n\n  function initializeNeighbors() {\n    for (let i = 0; i < height; i++) {\n      let row = [];\n\n      for (let j = 0; j < width; j++) {\n        row.push(0);\n      }\n\n      livingNeighbors.push(row);\n    }\n  }\n\n  initializeNeighbors();\n\n  function generateInitialGrid() {\n    for (let i = 0; i < height; i++) {\n      let row = [];\n\n      for (let j = 0; j < width; j++) {\n        if (Math.random() < 0.05) {\n          // 1 - alive\n          row.push(1);\n\n          for (let dir in DIRECTIONS) {\n            let x = i + dir[0];\n            let y = j + dir[0];\n\n            if (x >= 0 && y >= 0 && x < height && y < width) {\n              livingNeighbors[x][y]++;\n            }\n          }\n        } else {\n          // 0 - dead\n          row.push(0);\n        }\n      }\n\n      initialGrid.push(row);\n    }\n  }\n\n  generateInitialGrid();\n  const [grid, updateGrid] = useState(initialGrid);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: grid.map(function (row, rowId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((val, colId) => /*#__PURE__*/_jsxDEV(Cell, {\n          life: val\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 40\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"mXq3UGy5tBMV+BNWqJOqQoHx5b8=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Grid.jsx"],"names":["React","useState","useDispatch","useSelector","selectWidth","selectHeight","Cell","Grid","width","height","initialGrid","livingNeighbors","DIRECTIONS","initializeNeighbors","i","row","j","push","generateInitialGrid","Math","random","dir","x","y","grid","updateGrid","map","rowId","val","colId"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n// import Container from 'react-bootstrap/Container'\n// import Row from 'react-bootstrap/Row'\n// import Col from 'react-bootstrap/Col'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectWidth, selectHeight } from './sizeSlice'\nimport Cell from './Cell'\n\nexport default function Grid() {\n    const width = useSelector(selectWidth)\n    const height = useSelector(selectHeight)\n\n    const initialGrid = []\n    const livingNeighbors = []\n    const DIRECTIONS = [[0, 1], [1, 0], [0, -1], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]]\n\n    function initializeNeighbors() {\n        for (let i=0; i<height; i++) {\n            let row = [];\n            for (let j=0; j<width; j++) {\n                row.push(0)\n            }\n            livingNeighbors.push(row)\n        }\n    }\n    initializeNeighbors()\n    function generateInitialGrid() {\n        for (let i=0; i<height; i++) {\n            let row = [];\n            for (let j=0; j<width; j++) {\n                if (Math.random() < 0.05) {\n                    // 1 - alive\n                    row.push(1)\n                    for (let dir in DIRECTIONS) {\n                        let x = i+dir[0]\n                        let y = j+dir[0]\n                        if (x >=0 && y>=0 && x<height && y<width) {\n                            livingNeighbors[x][y]++\n                        }\n                    }\n                } else {\n                    // 0 - dead\n                    row.push(0)\n                }\n            }\n            initialGrid.push(row)\n        }\n    }\n    generateInitialGrid()\n    const [grid, updateGrid] = useState(initialGrid)\n    \n    return (\n        <div className=\"container\"> \n            {grid.map(function(row, rowId) {\n                return (\n                    <div className=\"row\">\n                    {row.map(\n                        (val, colId)=> <Cell life={val}/>\n                    )}\n                    </div>\n                    )\n            })}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}