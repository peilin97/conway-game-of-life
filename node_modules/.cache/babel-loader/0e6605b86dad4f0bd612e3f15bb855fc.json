{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Cell.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleCell, selectGrid } from './gridSlice';\nimport { selectStart } from './gameStateSlice';\nimport { selectDeadColor, selectLivingColor, selectHeatMap } from './colorSlice';\nimport Gradient from \"javascript-color-gradient\"; // import Col from 'react-bootstrap/Col'\n\nconst colorGradient = new Gradient();\nexport default function Cell(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const grid = useSelector(selectGrid);\n  const start = useSelector(selectStart);\n  const livingColor = useSelector(selectLivingColor);\n  const deadColor = useSelector(selectDeadColor);\n  const heatMap = useSelector(selectHeatMap);\n  let colorStyle = {};\n\n  function addLifeStatus() {\n    if (grid[props.pos[0]][props.pos[1]] === 1) {\n      colorStyle.backgroundColor = `rgba(${livingColor.r}, ${livingColor.g}, ${livingColor.b}, ${livingColor.a})`;\n    } else if (!heatMap) {\n      colorStyle.backgroundColor = `rgba(${deadColor.r}, ${deadColor.g}, ${deadColor.b}, ${deadColor.a})`;\n    } else {\n      // build heat map for dead cells\n      colorGradient.setMidpoint(12);\n      colorGradient.setGradient(livingColor, deadColor);\n      const array = colorGradient.getArray();\n    }\n  }\n\n  addLifeStatus();\n\n  function clickCell() {\n    if (!start) {\n      dispatch(toggleCell(props.pos));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col\",\n    style: colorStyle,\n    onClick: () => clickCell()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cell, \"9KaKDuUYPelTImCYvB4Et8zAEOo=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Cell.jsx"],"names":["React","useDispatch","useSelector","toggleCell","selectGrid","selectStart","selectDeadColor","selectLivingColor","selectHeatMap","Gradient","colorGradient","Cell","props","dispatch","grid","start","livingColor","deadColor","heatMap","colorStyle","addLifeStatus","pos","backgroundColor","r","g","b","a","setMidpoint","setGradient","array","getArray","clickCell"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAAQC,UAAR,EACIC,UADJ,QACqB,aADrB;AAEA,SACIC,WADJ,QAEO,kBAFP;AAGA,SACIC,eADJ,EAEIC,iBAFJ,EAGIC,aAHJ,QAIO,cAJP;AAKA,OAAOC,QAAP,MAAqB,2BAArB,C,CACA;;AAEA,MAAMC,aAAa,GAAG,IAAID,QAAJ,EAAtB;AAEA,eAAe,SAASE,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAChC,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,IAAI,GAAGZ,WAAW,CAACE,UAAD,CAAxB;AACA,QAAMW,KAAK,GAAGb,WAAW,CAACG,WAAD,CAAzB;AACA,QAAMW,WAAW,GAAGd,WAAW,CAACK,iBAAD,CAA/B;AACA,QAAMU,SAAS,GAAGf,WAAW,CAACI,eAAD,CAA7B;AACA,QAAMY,OAAO,GAAGhB,WAAW,CAACM,aAAD,CAA3B;AAEA,MAAIW,UAAU,GAAG,EAAjB;;AAEA,WAASC,aAAT,GAAyB;AACrB,QAAIN,IAAI,CAACF,KAAK,CAACS,GAAN,CAAU,CAAV,CAAD,CAAJ,CAAmBT,KAAK,CAACS,GAAN,CAAU,CAAV,CAAnB,MAAqC,CAAzC,EAA4C;AACxCF,MAAAA,UAAU,CAACG,eAAX,GAA8B,QAAQN,WAAW,CAACO,CAAG,KAAKP,WAAW,CAACQ,CAAG,KAAKR,WAAW,CAACS,CAAG,KAAKT,WAAW,CAACU,CAAG,GAAjH;AACH,KAFD,MAEO,IAAI,CAACR,OAAL,EAAc;AACjBC,MAAAA,UAAU,CAACG,eAAX,GAA8B,QAAQL,SAAS,CAACM,CAAG,KAAKN,SAAS,CAACO,CAAG,KAAKP,SAAS,CAACQ,CAAG,KAAKR,SAAS,CAACS,CAAG,GAAzG;AACH,KAFM,MAEA;AACH;AACAhB,MAAAA,aAAa,CAACiB,WAAd,CAA0B,EAA1B;AACAjB,MAAAA,aAAa,CAACkB,WAAd,CAA0BZ,WAA1B,EAAuCC,SAAvC;AACA,YAAMY,KAAK,GAAGnB,aAAa,CAACoB,QAAd,EAAd;AAEH;AACJ;;AACDV,EAAAA,aAAa;;AAEb,WAASW,SAAT,GAAqB;AACjB,QAAI,CAAChB,KAAL,EAAY;AACRF,MAAAA,QAAQ,CAACV,UAAU,CAACS,KAAK,CAACS,GAAP,CAAX,CAAR;AACH;AACJ;;AAED,sBACI;AAAK,IAAA,SAAS,EAAG,KAAjB;AAAuB,IAAA,KAAK,EAAEF,UAA9B;AAA0C,IAAA,OAAO,EAAE,MAAMY,SAAS;AAAlE;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH;;GAnCuBpB,I;UACHV,W,EACJC,W,EACCA,W,EACMA,W,EACFA,W,EACFA,W;;;KANIS,I","sourcesContent":["import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {toggleCell,\n    selectGrid} from './gridSlice'\nimport {\n    selectStart\n} from './gameStateSlice'\nimport {\n    selectDeadColor,\n    selectLivingColor,\n    selectHeatMap,\n} from './colorSlice'\nimport Gradient from \"javascript-color-gradient\"\n// import Col from 'react-bootstrap/Col'\n\nconst colorGradient = new Gradient()\n\nexport default function Cell(props) {\n    const dispatch = useDispatch()\n    const grid = useSelector(selectGrid)\n    const start = useSelector(selectStart)\n    const livingColor = useSelector(selectLivingColor)\n    const deadColor = useSelector(selectDeadColor)\n    const heatMap = useSelector(selectHeatMap)\n\n    let colorStyle = {}\n    \n    function addLifeStatus() {\n        if (grid[props.pos[0]][props.pos[1]] === 1) {\n            colorStyle.backgroundColor = `rgba(${ livingColor.r }, ${ livingColor.g }, ${ livingColor.b }, ${ livingColor.a })`\n        } else if (!heatMap) {\n            colorStyle.backgroundColor = `rgba(${ deadColor.r }, ${ deadColor.g }, ${ deadColor.b }, ${ deadColor.a })`\n        } else {\n            // build heat map for dead cells\n            colorGradient.setMidpoint(12)\n            colorGradient.setGradient(livingColor, deadColor)\n            const array = colorGradient.getArray()\n            \n        }\n    }\n    addLifeStatus();\n\n    function clickCell() {\n        if (!start) {\n            dispatch(toggleCell(props.pos))\n        }\n    }\n\n    return (\n        <div className = \"col\" style={colorStyle} onClick={() => clickCell()}>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}