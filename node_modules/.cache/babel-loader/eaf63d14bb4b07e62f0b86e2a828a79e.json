{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Cell.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleCell, selectGrid, selectWidth, selectHeight } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectDeadColor, selectLivingColor, selectHeatMap, selectColorGradientArray } from '../color/colorSlice';\nexport default function Cell(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const grid = useSelector(selectGrid);\n  const width = useSelector(selectWidth);\n  const height = useSelector(selectHeight);\n  const start = useSelector(selectStart);\n  const livingColor = useSelector(selectLivingColor);\n  const deadColor = useSelector(selectDeadColor);\n  const heatMap = useSelector(selectHeatMap);\n  const colorGradientArray = useSelector(selectColorGradientArray);\n  const squareLength = Math.min((600 / width).toFixed(2), (600 / height).toFixed(2));\n  let colorStyle = {\n    width: `${squareLength}px`,\n    height: `${squareLength}px`\n  };\n\n  function addLifeStatus() {\n    if (grid[props.pos[0]][props.pos[1]] === 1) {\n      colorStyle.backgroundColor = `${livingColor}`;\n    } else if (!heatMap) {\n      colorStyle.backgroundColor = `${deadColor}`;\n    } else {\n      // build heat map for dead cells\n      let val = -Number(grid[props.pos[0]][props.pos[1]]);\n      colorStyle.backgroundColor = `${colorGradientArray[Number(val + 1)]}`;\n    }\n  }\n\n  addLifeStatus();\n\n  function clickCell() {\n    if (!start) {\n      dispatch(toggleCell(props.pos));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gridCol\",\n    style: colorStyle,\n    onClick: () => clickCell()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cell, \"xZDLkHRiNkDFLf193/gLr7wUHOA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Cell.jsx"],"names":["React","useDispatch","useSelector","toggleCell","selectGrid","selectWidth","selectHeight","selectStart","selectDeadColor","selectLivingColor","selectHeatMap","selectColorGradientArray","Cell","props","dispatch","grid","width","height","start","livingColor","deadColor","heatMap","colorGradientArray","squareLength","Math","min","toFixed","colorStyle","addLifeStatus","pos","backgroundColor","val","Number","clickCell"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,WAAjC,EAA8CC,YAA9C,QAAkE,aAAlE;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SACIC,eADJ,EAEIC,iBAFJ,EAGIC,aAHJ,EAIIC,wBAJJ,QAKO,qBALP;AAOA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAChC,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,IAAI,GAAGb,WAAW,CAACE,UAAD,CAAxB;AACA,QAAMY,KAAK,GAAGd,WAAW,CAACG,WAAD,CAAzB;AACA,QAAMY,MAAM,GAAGf,WAAW,CAACI,YAAD,CAA1B;AACA,QAAMY,KAAK,GAAGhB,WAAW,CAACK,WAAD,CAAzB;AACA,QAAMY,WAAW,GAAGjB,WAAW,CAACO,iBAAD,CAA/B;AACA,QAAMW,SAAS,GAAGlB,WAAW,CAACM,eAAD,CAA7B;AACA,QAAMa,OAAO,GAAGnB,WAAW,CAACQ,aAAD,CAA3B;AACA,QAAMY,kBAAkB,GAAGpB,WAAW,CAACS,wBAAD,CAAtC;AACA,QAAMY,YAAY,GAAGC,IAAI,CAACC,GAAL,CACjB,CAAC,MAAMT,KAAP,EAAcU,OAAd,CAAsB,CAAtB,CADiB,EAEjB,CAAC,MAAMT,MAAP,EAAeS,OAAf,CAAuB,CAAvB,CAFiB,CAArB;AAKA,MAAIC,UAAU,GAAG;AACbX,IAAAA,KAAK,EAAG,GAAEO,YAAa,IADV;AAEbN,IAAAA,MAAM,EAAG,GAAEM,YAAa;AAFX,GAAjB;;AAKA,WAASK,aAAT,GAAyB;AACrB,QAAIb,IAAI,CAACF,KAAK,CAACgB,GAAN,CAAU,CAAV,CAAD,CAAJ,CAAmBhB,KAAK,CAACgB,GAAN,CAAU,CAAV,CAAnB,MAAqC,CAAzC,EAA4C;AACxCF,MAAAA,UAAU,CAACG,eAAX,GAA8B,GAAEX,WAAY,EAA5C;AACH,KAFD,MAEO,IAAI,CAACE,OAAL,EAAc;AACjBM,MAAAA,UAAU,CAACG,eAAX,GAA8B,GAAEV,SAAU,EAA1C;AACH,KAFM,MAEA;AACH;AACA,UAAIW,GAAG,GAAG,CAACC,MAAM,CAACjB,IAAI,CAACF,KAAK,CAACgB,GAAN,CAAU,CAAV,CAAD,CAAJ,CAAmBhB,KAAK,CAACgB,GAAN,CAAU,CAAV,CAAnB,CAAD,CAAjB;AACAF,MAAAA,UAAU,CAACG,eAAX,GAA8B,GAC1BR,kBAAkB,CAACU,MAAM,CAACD,GAAG,GAAG,CAAP,CAAP,CACrB,EAFD;AAGH;AACJ;;AACDH,EAAAA,aAAa;;AAEb,WAASK,SAAT,GAAqB;AACjB,QAAI,CAACf,KAAL,EAAY;AACRJ,MAAAA,QAAQ,CAACX,UAAU,CAACU,KAAK,CAACgB,GAAP,CAAX,CAAR;AACH;AACJ;;AAED,sBACI;AACI,IAAA,SAAS,EAAC,SADd;AAEI,IAAA,KAAK,EAAEF,UAFX;AAGI,IAAA,OAAO,EAAE,MAAMM,SAAS;AAH5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GA/CuBrB,I;UACHX,W,EACJC,W,EACCA,W,EACCA,W,EACDA,W,EACMA,W,EACFA,W,EACFA,W,EACWA,W;;;KATPU,I","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleCell, selectGrid, selectWidth, selectHeight } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport {\n    selectDeadColor,\n    selectLivingColor,\n    selectHeatMap,\n    selectColorGradientArray,\n} from '../color/colorSlice';\n\nexport default function Cell(props) {\n    const dispatch = useDispatch();\n    const grid = useSelector(selectGrid);\n    const width = useSelector(selectWidth);\n    const height = useSelector(selectHeight);\n    const start = useSelector(selectStart);\n    const livingColor = useSelector(selectLivingColor);\n    const deadColor = useSelector(selectDeadColor);\n    const heatMap = useSelector(selectHeatMap);\n    const colorGradientArray = useSelector(selectColorGradientArray);\n    const squareLength = Math.min(\n        (600 / width).toFixed(2),\n        (600 / height).toFixed(2)\n    );\n\n    let colorStyle = {\n        width: `${squareLength}px`,\n        height: `${squareLength}px`,\n    };\n\n    function addLifeStatus() {\n        if (grid[props.pos[0]][props.pos[1]] === 1) {\n            colorStyle.backgroundColor = `${livingColor}`;\n        } else if (!heatMap) {\n            colorStyle.backgroundColor = `${deadColor}`;\n        } else {\n            // build heat map for dead cells\n            let val = -Number(grid[props.pos[0]][props.pos[1]]);\n            colorStyle.backgroundColor = `${\n                colorGradientArray[Number(val + 1)]\n            }`;\n        }\n    }\n    addLifeStatus();\n\n    function clickCell() {\n        if (!start) {\n            dispatch(toggleCell(props.pos));\n        }\n    }\n\n    return (\n        <div\n            className=\"gridCol\"\n            style={colorStyle}\n            onClick={() => clickCell()}></div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}