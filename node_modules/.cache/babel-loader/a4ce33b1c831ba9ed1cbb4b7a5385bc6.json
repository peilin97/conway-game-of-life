{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Cell.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleCell, selectGrid } from './gridSlice';\nimport { selectStart } from './gameStateSlice';\nimport { selectDeadColor, selectLivingColor, selectHeatMap, selectColorGradientArray } from './colorSlice';\nexport default function Cell(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const grid = useSelector(selectGrid);\n  const start = useSelector(selectStart);\n  const livingColor = useSelector(selectLivingColor);\n  const deadColor = useSelector(selectDeadColor);\n  const heatMap = useSelector(selectHeatMap);\n  const colorGradientArray = useSelector(selectColorGradientArray);\n  let colorStyle = {};\n\n  function addLifeStatus() {\n    if (grid[props.pos[0]][props.pos[1]] === 1) {\n      colorStyle.backgroundColor = `${livingColor}`;\n    } else if (!heatMap) {\n      colorStyle.backgroundColor = `${deadColor}`;\n    } else {\n      // build heat map for dead cells\n      let val = -Number(grid[props.pos[0]][props.pos[1]]);\n      colorStyle.backgroundColor = `${colorGradientArray[Number(val + 1)]}`;\n    }\n  }\n\n  addLifeStatus();\n\n  function clickCell() {\n    if (!start) {\n      dispatch(toggleCell(props.pos));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gridCol\",\n    style: colorStyle,\n    onClick: () => clickCell()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cell, \"pLs30pOfFhk1i9dAYpTbtNNR0uo=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Cell.jsx"],"names":["React","useDispatch","useSelector","toggleCell","selectGrid","selectStart","selectDeadColor","selectLivingColor","selectHeatMap","selectColorGradientArray","Cell","props","dispatch","grid","start","livingColor","deadColor","heatMap","colorGradientArray","colorStyle","addLifeStatus","pos","backgroundColor","val","Number","clickCell"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAAQC,UAAR,EACIC,UADJ,QACqB,aADrB;AAEA,SACIC,WADJ,QAEO,kBAFP;AAGA,SACIC,eADJ,EAEIC,iBAFJ,EAGIC,aAHJ,EAIIC,wBAJJ,QAKO,cALP;AAQA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAChC,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,IAAI,GAAGX,WAAW,CAACE,UAAD,CAAxB;AACA,QAAMU,KAAK,GAAGZ,WAAW,CAACG,WAAD,CAAzB;AACA,QAAMU,WAAW,GAAGb,WAAW,CAACK,iBAAD,CAA/B;AACA,QAAMS,SAAS,GAAGd,WAAW,CAACI,eAAD,CAA7B;AACA,QAAMW,OAAO,GAAGf,WAAW,CAACM,aAAD,CAA3B;AACA,QAAMU,kBAAkB,GAAGhB,WAAW,CAACO,wBAAD,CAAtC;AAEA,MAAIU,UAAU,GAAG,EAAjB;;AAEA,WAASC,aAAT,GAAyB;AACrB,QAAIP,IAAI,CAACF,KAAK,CAACU,GAAN,CAAU,CAAV,CAAD,CAAJ,CAAmBV,KAAK,CAACU,GAAN,CAAU,CAAV,CAAnB,MAAqC,CAAzC,EAA4C;AACxCF,MAAAA,UAAU,CAACG,eAAX,GAA8B,GAAGP,WAAa,EAA9C;AACH,KAFD,MAEO,IAAI,CAACE,OAAL,EAAc;AACjBE,MAAAA,UAAU,CAACG,eAAX,GAA8B,GAAGN,SAAW,EAA5C;AACH,KAFM,MAEA;AACH;AACA,UAAIO,GAAG,GAAG,CAAEC,MAAM,CAACX,IAAI,CAACF,KAAK,CAACU,GAAN,CAAU,CAAV,CAAD,CAAJ,CAAmBV,KAAK,CAACU,GAAN,CAAU,CAAV,CAAnB,CAAD,CAAlB;AACAF,MAAAA,UAAU,CAACG,eAAX,GAA8B,GAAEJ,kBAAkB,CAACM,MAAM,CAACD,GAAG,GAAC,CAAL,CAAP,CAAgB,EAAlE;AACH;AACJ;;AACDH,EAAAA,aAAa;;AAEb,WAASK,SAAT,GAAqB;AACjB,QAAI,CAACX,KAAL,EAAY;AACRF,MAAAA,QAAQ,CAACT,UAAU,CAACQ,KAAK,CAACU,GAAP,CAAX,CAAR;AACH;AACJ;;AAED,sBACI;AAAK,IAAA,SAAS,EAAG,SAAjB;AAA2B,IAAA,KAAK,EAAEF,UAAlC;AAA8C,IAAA,OAAO,EAAE,MAAMM,SAAS;AAAtE;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH;;GAlCuBf,I;UACHT,W,EACJC,W,EACCA,W,EACMA,W,EACFA,W,EACFA,W,EACWA,W;;;KAPPQ,I","sourcesContent":["import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {toggleCell,\n    selectGrid} from './gridSlice'\nimport {\n    selectStart\n} from './gameStateSlice'\nimport {\n    selectDeadColor,\n    selectLivingColor,\n    selectHeatMap,\n    selectColorGradientArray\n} from './colorSlice'\n\n\nexport default function Cell(props) {\n    const dispatch = useDispatch()\n    const grid = useSelector(selectGrid)\n    const start = useSelector(selectStart)\n    const livingColor = useSelector(selectLivingColor)\n    const deadColor = useSelector(selectDeadColor)\n    const heatMap = useSelector(selectHeatMap)\n    const colorGradientArray = useSelector(selectColorGradientArray)\n\n    let colorStyle = {}\n    \n    function addLifeStatus() {\n        if (grid[props.pos[0]][props.pos[1]] === 1) {\n            colorStyle.backgroundColor = `${ livingColor }`\n        } else if (!heatMap) {\n            colorStyle.backgroundColor = `${ deadColor }`\n        } else {\n            // build heat map for dead cells\n            let val = - Number(grid[props.pos[0]][props.pos[1]])\n            colorStyle.backgroundColor = `${colorGradientArray[Number(val+1)]}`\n        }\n    }\n    addLifeStatus();\n\n    function clickCell() {\n        if (!start) {\n            dispatch(toggleCell(props.pos))\n        }\n    }\n\n    return (\n        <div className = \"gridCol\" style={colorStyle} onClick={() => clickCell()}>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}