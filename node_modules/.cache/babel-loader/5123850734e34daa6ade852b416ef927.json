{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst DIRECTIONS = [[0, 1], [1, 0], [0, -1], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]];\nexport const gridSlice = createSlice({\n  name: 'size',\n  initialState: {\n    width: 0,\n    height: 0,\n    grid: [],\n    livingNeighbors: []\n  },\n  reducers: {\n    setSize: (state, action) => {\n      state.width = action.payload.width;\n      state.height = action.payload.height;\n    },\n    initializeGridAndNeighbors: state => {\n      for (let i = 0; i < state.height; i++) {\n        let row = [];\n\n        for (let j = 0; j < state.width; j++) {\n          row.push(0);\n        }\n\n        state.livingNeighbors.push(row);\n      }\n\n      for (let i = 0; i < state.height; i++) {\n        let row = [];\n\n        for (let j = 0; j < state.width; j++) {\n          if (Math.random() < 0.05) {\n            // 1 - living\n            row.push(1);\n\n            for (let dir in DIRECTIONS) {\n              let x = i + dir[0];\n              let y = j + dir[0];\n\n              if (x >= 0 && y >= 0 && x < height && y < width) {\n                livingNeighbors[x][y]++;\n              }\n            }\n          } else {\n            // 0 - dead\n            row.push(0);\n          }\n        }\n\n        initialGrid.push(row);\n      }\n    }\n  }\n});\nexport const {\n  setSize\n} = gridSlice.actions;\nexport const selectWidth = state => state.size.width;\nexport const selectHeight = state => state.size.height;\nexport default gridSlice.reducer;","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/sizeSlice.js"],"names":["createSlice","DIRECTIONS","gridSlice","name","initialState","width","height","grid","livingNeighbors","reducers","setSize","state","action","payload","initializeGridAndNeighbors","i","row","j","push","Math","random","dir","x","y","initialGrid","actions","selectWidth","size","selectHeight","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst DIRECTIONS = [[0, 1], [1, 0], [0, -1], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]]\n\nexport const gridSlice = createSlice({\n    name:'size',\n    initialState:{\n        width: 0,\n        height: 0,\n        grid: [],\n        livingNeighbors:[],\n    },\n    reducers: {\n        setSize: (state, action) => {\n            state.width = action.payload.width;\n            state.height = action.payload.height;\n        },\n        initializeGridAndNeighbors: (state) => {\n            for (let i=0; i<state.height; i++) {\n                let row = [];\n                for (let j=0; j<state.width; j++) {\n                    row.push(0)\n                }\n                state.livingNeighbors.push(row)\n            }\n            for (let i=0; i<state.height; i++) {\n                let row = [];\n                for (let j=0; j<state.width; j++) {\n                    if (Math.random() < 0.05) {\n                        // 1 - living\n                        row.push(1)\n                        for (let dir in DIRECTIONS) {\n                            let x = i+dir[0]\n                            let y = j+dir[0]\n                            if (x >=0 && y>=0 && x<height && y<width) {\n                                livingNeighbors[x][y]++\n                            }\n                        }\n                    } else {\n                        // 0 - dead\n                        row.push(0)\n                    }\n                }\n                initialGrid.push(row)\n            }\n        }\n        \n    }\n});\n\nexport const {setSize} = gridSlice.actions;\nexport const selectWidth = state => state.size.width;\nexport const selectHeight = state => state.size.height;\n\nexport default gridSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}