{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react'; // import { useMediaQuery } from 'react-responsive';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectGrid // selectWidth,\n// selectHeight,\n, updateGridAndNeighbors, setCellSize } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectSpeed } from '../speed/speedSlice';\nimport Cell from './Cell';\nimport './grid.css'; // const IsLarge = () => {\n//     const isLG = useMediaQuery({\n//             query: '(min-device-width: 1200px)'\n//         });\n//     const res = isLG ? true : false;\n//     return res;\n// };\n// const IsMedium = () => {\n//     const isMD = useMediaQuery({minDeviceWidth: 992});\n//     return isMD;\n// };\n\nexport default function Grid() {\n  _s();\n\n  // const isLG = useMediaQuery({\n  //     query: '(min-device-width: 1200px)'\n  // });\n  // const isMD = useMediaQuery({\n  //     query: '(min-device-width: 992px)'\n  // });\n  // const isSM = useMediaQuery({\n  //     query: '(min-device-width: 768px)'\n  // });\n  // const isXS = useMediaQuery({\n  //     query: '(min-device-width: 500px)'\n  // });\n  const setLength = () => {\n    const windowWidth = window.innerWidth;\n    let gridLength;\n\n    if (windowWidth >= 1200) {\n      gridLength = 700;\n    } else if (windowWidth >= 992) {\n      gridLength = 600;\n    } else if (windowWidth >= 768) {\n      gridLength = 500;\n    } else if (windowWidth >= 500) {\n      gridLength = 400;\n    } else {\n      gridLength = 300;\n    }\n\n    console.log(gridLength); // console.log(IsLarge.res);\n    // if (IsLarge.res) {\n    //     gridLength = 700;\n    // } else if (IsMedium) {\n    //     gridLength = 600;\n    // }\n    // else if (isSM) {\n    //     gridLength = 500;\n    // } else if (isXS) {\n    //     gridLength = 400;\n    // } else {\n    //     gridLength = 300;\n    // }\n\n    return gridLength;\n  };\n\n  const grid = useSelector(selectGrid);\n  const start = useSelector(selectStart);\n  const speed = useSelector(selectSpeed); // const width = useSelector(selectWidth);\n  // const height = useSelector(selectHeight);\n  // const cellWidth = useSelector(selectCellWidth);\n  // const cellHeight = useSelector(selectCellHeight);\n  // const [cellWidth, setCellWidth] = useState((setLength() / width).toFixed(2));\n  // const [cellHeight, setCellHeight] = useState((setLength() / height).toFixed(2));\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (start) {\n        dispatch(updateGridAndNeighbors());\n      }\n    }, Number(speed));\n\n    const handleResize = () => {\n      // setWindowWidth(window.innerWidth);\n      let gridLength = setLength();\n      dispatch(setCellSize(gridLength)); // setCellWidth(computeCellLength(gridLength, width));\n      // setCellHeight(computeCellLength(gridLength, height));\n      // setSizeStyle({\n      //     width: `${cellWidth}px`,\n      //     height: `${cellHeight}px`,\n      // });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return _ => {\n      window.removeEventListener('resize', handleResize);\n      clearTimeout(timer);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flexRow\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gridContainer\",\n      children: grid.map(function (row, rowId) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gridRow\",\n          children: row.map((val, colId) => /*#__PURE__*/_jsxDEV(Cell, {\n            pos: [rowId, colId]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"6SsNfkhB1FFIjtIYDUvIRu39Fq8=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Grid.jsx"],"names":["React","useEffect","useDispatch","useSelector","selectGrid","updateGridAndNeighbors","setCellSize","selectStart","selectSpeed","Cell","Grid","setLength","windowWidth","window","innerWidth","gridLength","console","log","grid","start","speed","dispatch","timer","setTimeout","Number","handleResize","addEventListener","_","removeEventListener","clearTimeout","map","row","rowId","val","colId"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n// import { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    selectGrid,\n    // selectWidth,\n    // selectHeight,\n    updateGridAndNeighbors,\n    setCellSize,\n} from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectSpeed } from '../speed/speedSlice';\nimport Cell from './Cell';\nimport './grid.css';\n\n// const IsLarge = () => {\n//     const isLG = useMediaQuery({\n//             query: '(min-device-width: 1200px)'\n//         });\n//     const res = isLG ? true : false;\n//     return res;\n// };\n\n// const IsMedium = () => {\n//     const isMD = useMediaQuery({minDeviceWidth: 992});\n//     return isMD;\n// };\n\nexport default function Grid() {\n    // const isLG = useMediaQuery({\n    //     query: '(min-device-width: 1200px)'\n    // });\n    // const isMD = useMediaQuery({\n    //     query: '(min-device-width: 992px)'\n    // });\n    // const isSM = useMediaQuery({\n    //     query: '(min-device-width: 768px)'\n    // });\n    // const isXS = useMediaQuery({\n    //     query: '(min-device-width: 500px)'\n    // });\n\n    const setLength = () => {\n        const windowWidth = window.innerWidth;\n        let gridLength;\n        if (windowWidth >= 1200) {\n            gridLength = 700;\n        } else if (windowWidth >= 992) {\n            gridLength = 600;\n        } else if (windowWidth >= 768) {\n            gridLength = 500;\n        } else if (windowWidth >= 500) {\n            gridLength = 400;\n        } else {\n            gridLength = 300;\n        }\n        console.log(gridLength);\n        // console.log(IsLarge.res);\n        // if (IsLarge.res) {\n        //     gridLength = 700;\n        // } else if (IsMedium) {\n        //     gridLength = 600;\n        // }\n        // else if (isSM) {\n        //     gridLength = 500;\n        // } else if (isXS) {\n        //     gridLength = 400;\n        // } else {\n        //     gridLength = 300;\n        // }\n        return gridLength;\n    };\n\n    const grid = useSelector(selectGrid);\n    const start = useSelector(selectStart);\n    const speed = useSelector(selectSpeed);\n    // const width = useSelector(selectWidth);\n    // const height = useSelector(selectHeight);\n    // const cellWidth = useSelector(selectCellWidth);\n    // const cellHeight = useSelector(selectCellHeight);\n    // const [cellWidth, setCellWidth] = useState((setLength() / width).toFixed(2));\n    // const [cellHeight, setCellHeight] = useState((setLength() / height).toFixed(2));\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            if (start) {\n                dispatch(updateGridAndNeighbors());\n            }\n        }, Number(speed));\n        const handleResize = () => {\n            // setWindowWidth(window.innerWidth);\n            let gridLength = setLength();\n            dispatch(setCellSize(gridLength));\n            // setCellWidth(computeCellLength(gridLength, width));\n            // setCellHeight(computeCellLength(gridLength, height));\n            // setSizeStyle({\n            //     width: `${cellWidth}px`,\n            //     height: `${cellHeight}px`,\n            // });\n        };\n        window.addEventListener('resize', handleResize);\n        return _ => {\n            window.removeEventListener('resize', handleResize);\n            clearTimeout(timer);\n        };\n    });\n\n    return (\n        <div className=\"flexRow\">\n            <div className=\"gridContainer\">\n                {grid.map(function (row, rowId) {\n                    return (\n                        <div className=\"gridRow\">\n                            {row.map((val, colId) => (\n                                <Cell pos={[rowId, colId]} />\n                            ))}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}