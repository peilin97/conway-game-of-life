{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Cell.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleCell, selectGrid, selectWidth, selectHeight } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectDeadColor, selectLivingColor, selectHeatMap, selectColorGradientArray } from '../color/colorSlice';\n\nfunction debounce(fn, ms) {\n  let timer;\n  return _ => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn.apply(this, arguments);\n    }, ms);\n  };\n}\n\nexport default function Cell(props) {\n  _s();\n\n  const isLG = useMediaQuery({\n    query: '(min-device-width: 1200px)'\n  });\n  const isMD = useMediaQuery({\n    query: '(min-device-width: 992px)'\n  });\n  const isSM = useMediaQuery({\n    query: '(min-device-width: 768px)'\n  });\n  const isXS = useMediaQuery({\n    query: '(max-device-width: 500px)'\n  });\n  const isPhone = useMediaQuery({\n    query: '(max-device-width: 400px)'\n  });\n  const dispatch = useDispatch();\n  const grid = useSelector(selectGrid);\n  const width = useSelector(selectWidth);\n  const height = useSelector(selectHeight);\n  const start = useSelector(selectStart);\n  const livingColor = useSelector(selectLivingColor);\n  const deadColor = useSelector(selectDeadColor);\n  const heatMap = useSelector(selectHeatMap);\n  const colorGradientArray = useSelector(selectColorGradientArray);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [cellWidth, setCellWidth] = useState((windowWidth * 0.4 / width).toFixed(2));\n  const [cellHeight, setCellHeight] = useState((windowWidth * 0.4 / height).toFixed(2));\n  const [colorStyle, setStyle] = useState({\n    width: `${cellWidth}px`,\n    height: `${cellHeight}px`\n  });\n  useEffect(() => {\n    function handleResize() {\n      setWindowWidth(window.innerWidth);\n\n      if (isLG) {\n        setCellWidth(computeCellLength(700, width));\n        setCellHeight(computeCellLength(700, height));\n      } else if (isMD) {\n        setCellWidth(computeCellLength(600, width));\n        setCellHeight(computeCellLength(600, height));\n      } else if (isSM) {\n        setCellWidth(computeCellLength(500, width));\n        setCellHeight(computeCellLength(500, height));\n      } else if (isXS) {\n        setCellWidth(computeCellLength(400, width));\n        setCellHeight(computeCellLength(400, height));\n      } else if (isPhone) {\n        setCellWidth(computeCellLength(300, width));\n        setCellHeight(computeCellLength(300, height));\n      }\n\n      setStyle({\n        width: `${cellWidth}px`,\n        height: `${cellHeight}px`\n      });\n    } // const debouncedHandleResize = debounce(function handleResize() {\n    //     setWindowWidth(window.innerWidth);\n    //     if (isLargeScreen) {\n    //         setCellWidth(computeCellLength(700, width));\n    //         setCellHeight(computeCellLength(700, height));\n    //     }\n    //   }, 1000);\n\n\n    window.addEventListener('resize', handleResize);\n    return _ => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  const computeCellLength = (gridLength, num) => (gridLength / num).toFixed(2); // const squareLength = Math.min(\n  //     (500 / width).toFixed(2),\n  //     (500 / height).toFixed(2)\n  // );\n\n\n  function addLifeStatus() {\n    if (grid[props.pos[0]][props.pos[1]] === 1) {\n      colorStyle.backgroundColor = `${livingColor}`;\n    } else if (!heatMap) {\n      colorStyle.backgroundColor = `${deadColor}`;\n    } else {\n      // build heat map for dead cells\n      let val = -Number(grid[props.pos[0]][props.pos[1]]);\n      colorStyle.backgroundColor = `${colorGradientArray[Number(val + 1)]}`;\n    }\n  }\n\n  addLifeStatus();\n\n  function clickCell() {\n    if (!start) {\n      dispatch(toggleCell(props.pos));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gridCol\",\n    style: colorStyle,\n    onClick: () => clickCell()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cell, \"mxte1nwkBGcYKLQfW+OUSi3FgW4=\", false, function () {\n  return [useMediaQuery, useMediaQuery, useMediaQuery, useMediaQuery, useMediaQuery, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Cell.jsx"],"names":["React","useState","useEffect","useMediaQuery","useDispatch","useSelector","toggleCell","selectGrid","selectWidth","selectHeight","selectStart","selectDeadColor","selectLivingColor","selectHeatMap","selectColorGradientArray","debounce","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments","Cell","props","isLG","query","isMD","isSM","isXS","isPhone","dispatch","grid","width","height","start","livingColor","deadColor","heatMap","colorGradientArray","windowWidth","setWindowWidth","window","innerWidth","cellWidth","setCellWidth","toFixed","cellHeight","setCellHeight","colorStyle","setStyle","handleResize","computeCellLength","addEventListener","removeEventListener","gridLength","num","addLifeStatus","pos","backgroundColor","val","Number","clickCell"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,WAAjC,EAA8CC,YAA9C,QAAkE,aAAlE;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SACIC,eADJ,EAEIC,iBAFJ,EAGIC,aAHJ,EAIIC,wBAJJ,QAKO,qBALP;;AAOA,SAASC,QAAT,CAAkBC,EAAlB,EAAsBC,EAAtB,EAA0B;AACtB,MAAIC,KAAJ;AACA,SAAOC,CAAC,IAAI;AACVC,IAAAA,YAAY,CAACF,KAAD,CAAZ;AACAA,IAAAA,KAAK,GAAGG,UAAU,CAACF,CAAC,IAAI;AACtBD,MAAAA,KAAK,GAAG,IAAR;AACAF,MAAAA,EAAE,CAACM,KAAH,CAAS,IAAT,EAAeC,SAAf;AACD,KAHiB,EAGfN,EAHe,CAAlB;AAID,GAND;AAOD;;AAEH,eAAe,SAASO,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAChC,QAAMC,IAAI,GAAGvB,aAAa,CAAC;AACvBwB,IAAAA,KAAK,EAAE;AADgB,GAAD,CAA1B;AAGA,QAAMC,IAAI,GAAGzB,aAAa,CAAC;AACvBwB,IAAAA,KAAK,EAAE;AADgB,GAAD,CAA1B;AAGA,QAAME,IAAI,GAAG1B,aAAa,CAAC;AACvBwB,IAAAA,KAAK,EAAE;AADgB,GAAD,CAA1B;AAGA,QAAMG,IAAI,GAAG3B,aAAa,CAAC;AACvBwB,IAAAA,KAAK,EAAE;AADgB,GAAD,CAA1B;AAGA,QAAMI,OAAO,GAAG5B,aAAa,CAAC;AAC1BwB,IAAAA,KAAK,EAAE;AADmB,GAAD,CAA7B;AAKA,QAAMK,QAAQ,GAAG5B,WAAW,EAA5B;AAEA,QAAM6B,IAAI,GAAG5B,WAAW,CAACE,UAAD,CAAxB;AACA,QAAM2B,KAAK,GAAG7B,WAAW,CAACG,WAAD,CAAzB;AACA,QAAM2B,MAAM,GAAG9B,WAAW,CAACI,YAAD,CAA1B;AACA,QAAM2B,KAAK,GAAG/B,WAAW,CAACK,WAAD,CAAzB;AACA,QAAM2B,WAAW,GAAGhC,WAAW,CAACO,iBAAD,CAA/B;AACA,QAAM0B,SAAS,GAAGjC,WAAW,CAACM,eAAD,CAA7B;AACA,QAAM4B,OAAO,GAAGlC,WAAW,CAACQ,aAAD,CAA3B;AACA,QAAM2B,kBAAkB,GAAGnC,WAAW,CAACS,wBAAD,CAAtC;AAEA,QAAM,CAAC2B,WAAD,EAAcC,cAAd,IAAgCzC,QAAQ,CAAC0C,MAAM,CAACC,UAAR,CAA9C;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B7C,QAAQ,CAAC,CAACwC,WAAW,GAAC,GAAZ,GAAkBP,KAAnB,EAA0Ba,OAA1B,CAAkC,CAAlC,CAAD,CAA1C;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BhD,QAAQ,CAAC,CAACwC,WAAW,GAAC,GAAZ,GAAkBN,MAAnB,EAA2BY,OAA3B,CAAmC,CAAnC,CAAD,CAA5C;AACA,QAAM,CAACG,UAAD,EAAaC,QAAb,IAAyBlD,QAAQ,CAAC;AACpCiC,IAAAA,KAAK,EAAG,GAAEW,SAAU,IADgB;AAEpCV,IAAAA,MAAM,EAAG,GAAEa,UAAW;AAFc,GAAD,CAAvC;AAKA9C,EAAAA,SAAS,CAAC,MAAM;AACZ,aAASkD,YAAT,GAAwB;AACpBV,MAAAA,cAAc,CAACC,MAAM,CAACC,UAAR,CAAd;;AACA,UAAIlB,IAAJ,EAAU;AACNoB,QAAAA,YAAY,CAACO,iBAAiB,CAAC,GAAD,EAAMnB,KAAN,CAAlB,CAAZ;AACAe,QAAAA,aAAa,CAACI,iBAAiB,CAAC,GAAD,EAAMlB,MAAN,CAAlB,CAAb;AACH,OAHD,MAGO,IAAIP,IAAJ,EAAU;AACbkB,QAAAA,YAAY,CAACO,iBAAiB,CAAC,GAAD,EAAMnB,KAAN,CAAlB,CAAZ;AACAe,QAAAA,aAAa,CAACI,iBAAiB,CAAC,GAAD,EAAMlB,MAAN,CAAlB,CAAb;AACH,OAHM,MAGA,IAAIN,IAAJ,EAAU;AACbiB,QAAAA,YAAY,CAACO,iBAAiB,CAAC,GAAD,EAAMnB,KAAN,CAAlB,CAAZ;AACAe,QAAAA,aAAa,CAACI,iBAAiB,CAAC,GAAD,EAAMlB,MAAN,CAAlB,CAAb;AACH,OAHM,MAGA,IAAIL,IAAJ,EAAU;AACbgB,QAAAA,YAAY,CAACO,iBAAiB,CAAC,GAAD,EAAMnB,KAAN,CAAlB,CAAZ;AACAe,QAAAA,aAAa,CAACI,iBAAiB,CAAC,GAAD,EAAMlB,MAAN,CAAlB,CAAb;AACH,OAHM,MAGA,IAAIJ,OAAJ,EAAa;AAChBe,QAAAA,YAAY,CAACO,iBAAiB,CAAC,GAAD,EAAMnB,KAAN,CAAlB,CAAZ;AACAe,QAAAA,aAAa,CAACI,iBAAiB,CAAC,GAAD,EAAMlB,MAAN,CAAlB,CAAb;AACH;;AACDgB,MAAAA,QAAQ,CAAC;AACLjB,QAAAA,KAAK,EAAG,GAAEW,SAAU,IADf;AAELV,QAAAA,MAAM,EAAG,GAAEa,UAAW;AAFjB,OAAD,CAAR;AAID,KAvBS,CAyBZ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACA,WAAOjC,CAAC,IAAG;AACPwB,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC;AACH,KAFD;AAGH,GApCQ,CAAT;;AAwCA,QAAMC,iBAAiB,GAAG,CAACG,UAAD,EAAaC,GAAb,KAAqB,CAACD,UAAU,GAAGC,GAAd,EAAmBV,OAAnB,CAA2B,CAA3B,CAA/C,CA7EgC,CA8EhC;AACA;AACA;AACA;;;AAEA,WAASW,aAAT,GAAyB;AACrB,QAAIzB,IAAI,CAACR,KAAK,CAACkC,GAAN,CAAU,CAAV,CAAD,CAAJ,CAAmBlC,KAAK,CAACkC,GAAN,CAAU,CAAV,CAAnB,MAAqC,CAAzC,EAA4C;AACxCT,MAAAA,UAAU,CAACU,eAAX,GAA8B,GAAEvB,WAAY,EAA5C;AACH,KAFD,MAEO,IAAI,CAACE,OAAL,EAAc;AACjBW,MAAAA,UAAU,CAACU,eAAX,GAA8B,GAAEtB,SAAU,EAA1C;AACH,KAFM,MAEA;AACH;AACA,UAAIuB,GAAG,GAAG,CAACC,MAAM,CAAC7B,IAAI,CAACR,KAAK,CAACkC,GAAN,CAAU,CAAV,CAAD,CAAJ,CAAmBlC,KAAK,CAACkC,GAAN,CAAU,CAAV,CAAnB,CAAD,CAAjB;AACAT,MAAAA,UAAU,CAACU,eAAX,GAA8B,GAC1BpB,kBAAkB,CAACsB,MAAM,CAACD,GAAG,GAAG,CAAP,CAAP,CACrB,EAFD;AAGH;AACJ;;AACDH,EAAAA,aAAa;;AAEb,WAASK,SAAT,GAAqB;AACjB,QAAI,CAAC3B,KAAL,EAAY;AACRJ,MAAAA,QAAQ,CAAC1B,UAAU,CAACmB,KAAK,CAACkC,GAAP,CAAX,CAAR;AACH;AACJ;;AAED,sBACI;AACI,IAAA,SAAS,EAAC,SADd;AAEI,IAAA,KAAK,EAAET,UAFX;AAGI,IAAA,OAAO,EAAE,MAAMa,SAAS;AAH5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GA/GuBvC,I;UACPrB,a,EAGAA,a,EAGAA,a,EAGAA,a,EAGGA,a,EAKCC,W,EAEJC,W,EACCA,W,EACCA,W,EACDA,W,EACMA,W,EACFA,W,EACFA,W,EACWA,W;;;KA3BPmB,I","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleCell, selectGrid, selectWidth, selectHeight } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport {\n    selectDeadColor,\n    selectLivingColor,\n    selectHeatMap,\n    selectColorGradientArray,\n} from '../color/colorSlice';\n\nfunction debounce(fn, ms) {\n    let timer\n    return _ => {\n      clearTimeout(timer)\n      timer = setTimeout(_ => {\n        timer = null\n        fn.apply(this, arguments)\n      }, ms)\n    };\n  }\n\nexport default function Cell(props) {\n    const isLG = useMediaQuery({\n        query: '(min-device-width: 1200px)'\n    });\n    const isMD = useMediaQuery({\n        query: '(min-device-width: 992px)'\n    });\n    const isSM = useMediaQuery({\n        query: '(min-device-width: 768px)'\n    });\n    const isXS = useMediaQuery({\n        query: '(max-device-width: 500px)'\n    });\n    const isPhone = useMediaQuery({\n        query: '(max-device-width: 400px)'\n    });\n\n\n    const dispatch = useDispatch();\n\n    const grid = useSelector(selectGrid);\n    const width = useSelector(selectWidth);\n    const height = useSelector(selectHeight);\n    const start = useSelector(selectStart);\n    const livingColor = useSelector(selectLivingColor);\n    const deadColor = useSelector(selectDeadColor);\n    const heatMap = useSelector(selectHeatMap);\n    const colorGradientArray = useSelector(selectColorGradientArray);\n\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n    const [cellWidth, setCellWidth] = useState((windowWidth*0.4 / width).toFixed(2));\n    const [cellHeight, setCellHeight] = useState((windowWidth*0.4 / height).toFixed(2));\n    const [colorStyle, setStyle] = useState({\n        width: `${cellWidth}px`,\n        height: `${cellHeight}px`,\n    });\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowWidth(window.innerWidth);\n            if (isLG) {\n                setCellWidth(computeCellLength(700, width));\n                setCellHeight(computeCellLength(700, height));\n            } else if (isMD) {\n                setCellWidth(computeCellLength(600, width));\n                setCellHeight(computeCellLength(600, height));\n            } else if (isSM) {\n                setCellWidth(computeCellLength(500, width));\n                setCellHeight(computeCellLength(500, height));\n            } else if (isXS) {\n                setCellWidth(computeCellLength(400, width));\n                setCellHeight(computeCellLength(400, height));\n            } else if (isPhone) {\n                setCellWidth(computeCellLength(300, width));\n                setCellHeight(computeCellLength(300, height));\n            }\n            setStyle({\n                width: `${cellWidth}px`,\n                height: `${cellHeight}px`,\n            })\n          }\n        \n        // const debouncedHandleResize = debounce(function handleResize() {\n        //     setWindowWidth(window.innerWidth);\n        //     if (isLargeScreen) {\n        //         setCellWidth(computeCellLength(700, width));\n        //         setCellHeight(computeCellLength(700, height));\n        //     }\n        //   }, 1000);\n        window.addEventListener('resize', handleResize);\n        return _=> {\n            window.removeEventListener('resize', handleResize)\n        };\n    });\n\n    \n\n    const computeCellLength = (gridLength, num) => (gridLength / num).toFixed(2);\n    // const squareLength = Math.min(\n    //     (500 / width).toFixed(2),\n    //     (500 / height).toFixed(2)\n    // );\n\n    function addLifeStatus() {\n        if (grid[props.pos[0]][props.pos[1]] === 1) {\n            colorStyle.backgroundColor = `${livingColor}`;\n        } else if (!heatMap) {\n            colorStyle.backgroundColor = `${deadColor}`;\n        } else {\n            // build heat map for dead cells\n            let val = -Number(grid[props.pos[0]][props.pos[1]]);\n            colorStyle.backgroundColor = `${\n                colorGradientArray[Number(val + 1)]\n            }`;\n        }\n    }\n    addLifeStatus();\n\n    function clickCell() {\n        if (!start) {\n            dispatch(toggleCell(props.pos));\n        }\n    }\n\n    return (\n        <div\n            className=\"gridCol\"\n            style={colorStyle}\n            onClick={() => clickCell()}></div>\n      \n    );\n}\n"]},"metadata":{},"sourceType":"module"}