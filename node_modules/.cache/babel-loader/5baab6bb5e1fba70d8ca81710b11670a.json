{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Instruction.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Collapse from 'react-bootstrap/Collapse';\nimport parse from 'html-react-parser'; // const parser = require('html-react-parser');\n\nexport default function Instruction() {\n  _s();\n\n  const questions = [\"What is Conway's Game of Life?\", \"Some basic terms before rules\", \"What are the rules of the game?\"];\n  const answers = ['<p>The Game of Life is a cellular-automaton,\\\n        zero player game, developed by John Conway in 1970.\\\n        The game is played on an infinite grid of square cells,\\\n        and its evolution is only determined by its initial state.\\\n        </p>\\\n        <p>reference: \\\n        <a href=\"http://web.mit.edu/sp.268/www/2010/lifeSlides.pdf\">\\\n        http://web.mit.edu/sp.268/www/2010/lifeSlides.pdf</a></p>', \"<p>Life has 4 simple rules:</p>\\\n        <ol>\\\n            <li>A living cell with less than two living neighbours dies.</li>\\\n            <li>A living cell with two or three live neighbours lives.</li>\\\n            <li>A living cell with more than three live neighbours dies.</li>\\\n            <li>A dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\\\n        </ol>\"];\n  const initialOpens = [];\n\n  for (let i = 0; i < answers.length; i++) {\n    initialOpens.push(false);\n  }\n\n  const [opens, setOpens] = useState(initialOpens);\n\n  const handleOpen = id => {\n    let newOpens = [...opens];\n    newOpens[id] = !opens[id];\n    setOpens(newOpens);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"customJumbotron\",\n    children: questions.map(function (q, id) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"light\",\n          onClick: () => handleOpen(id),\n          \"aria-controls\": id,\n          \"aria-expanded\": opens[id],\n          children: parse(q)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n          in: opens[id],\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: id,\n            children: parse(answers[id])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Instruction, \"s53KwyEycVVhcMqvPE4cA9cRCq0=\");\n\n_c = Instruction;\n\nvar _c;\n\n$RefreshReg$(_c, \"Instruction\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Instruction.jsx"],"names":["React","useState","Button","Collapse","parse","Instruction","questions","answers","initialOpens","i","length","push","opens","setOpens","handleOpen","id","newOpens","map","q"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,KAAP,MAAkB,mBAAlB,C,CACA;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAClC,QAAMC,SAAS,GAAG,CACd,gCADc,EAEd,+BAFc,EAGd,iCAHc,CAAlB;AAKA,QAAMC,OAAO,GAAG,CACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,kEARoB,EASZ;AACR;AACA;AACA;AACA;AACA;AACA,cAfoB,CAAhB;AAiBA,QAAMC,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGF,OAAO,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCD,IAAAA,YAAY,CAACG,IAAb,CAAkB,KAAlB;AACH;;AACD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAACO,YAAD,CAAlC;;AAEA,QAAMM,UAAU,GAAIC,EAAD,IAAQ;AACvB,QAAIC,QAAQ,GAAG,CAAC,GAAGJ,KAAJ,CAAf;AACAI,IAAAA,QAAQ,CAACD,EAAD,CAAR,GAAe,CAACH,KAAK,CAACG,EAAD,CAArB;AACAF,IAAAA,QAAQ,CAACG,QAAD,CAAR;AACH,GAJD;;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,cACKV,SAAS,CAACW,GAAV,CAAc,UAASC,CAAT,EAAYH,EAAZ,EAAgB;AAC3B,0BACI;AAAA,gCACI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,OAAhB;AACA,UAAA,OAAO,EAAE,MAAMD,UAAU,CAACC,EAAD,CADzB;AAEA,2BAAgBA,EAFhB;AAGA,2BAAeH,KAAK,CAACG,EAAD,CAHpB;AAAA,oBAKKX,KAAK,CAACc,CAAD;AALV;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI,QAAC,QAAD;AAAU,UAAA,EAAE,EAAEN,KAAK,CAACG,EAAD,CAAnB;AAAA,iCACI;AAAK,YAAA,EAAE,EAAEA,EAAT;AAAA,sBACKX,KAAK,CAACG,OAAO,CAACQ,EAAD,CAAR;AADV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAgBH,KAjBA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AA2CH;;GA9EuBV,W;;KAAAA,W","sourcesContent":["import React, { useState }from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Collapse from 'react-bootstrap/Collapse'\nimport parse from 'html-react-parser';\n// const parser = require('html-react-parser');\n\nexport default function Instruction() {\n    const questions = [\n        \"What is Conway's Game of Life?\",\n        \"Some basic terms before rules\",\n        \"What are the rules of the game?\"\n    ]\n    const answers = [\n        '<p>The Game of Life is a cellular-automaton,\\\n        zero player game, developed by John Conway in 1970.\\\n        The game is played on an infinite grid of square cells,\\\n        and its evolution is only determined by its initial state.\\\n        </p>\\\n        <p>reference: \\\n        <a href=\"http://web.mit.edu/sp.268/www/2010/lifeSlides.pdf\">\\\n        http://web.mit.edu/sp.268/www/2010/lifeSlides.pdf</a></p>',\n        \"<p>Life has 4 simple rules:</p>\\\n        <ol>\\\n            <li>A living cell with less than two living neighbours dies.</li>\\\n            <li>A living cell with two or three live neighbours lives.</li>\\\n            <li>A living cell with more than three live neighbours dies.</li>\\\n            <li>A dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\\\n        </ol>\"\n    ]\n    const initialOpens = []\n    for (let i=0; i < answers.length; i++) {\n        initialOpens.push(false)\n    }\n    const [opens, setOpens] = useState(initialOpens)\n\n    const handleOpen = (id) => {\n        let newOpens = [...opens]\n        newOpens[id] = !opens[id]\n        setOpens(newOpens)\n    }\n\n    return (\n        <div className=\"customJumbotron\">\n            {questions.map(function(q, id) {\n                return (\n                    <div>\n                        <Button variant=\"light\"\n                        onClick={() => handleOpen(id)}\n                        aria-controls= {id}\n                        aria-expanded={opens[id]}\n                        >\n                            {parse(q)}\n                        </Button>\n                        <Collapse in={opens[id]}>\n                            <div id={id}>\n                                {parse(answers[id])}\n                            </div>\n                        </Collapse>\n                    </div>\n                )\n            })}\n\n            {/* <div>\n            <Button variant=\"light\"\n            onClick={() => setOpen2(!open2)}\n            aria-controls=\"q2\"\n            aria-expanded={open2}\n            >\n                What are the rules of the game?\n            </Button>\n            <Collapse in={open2}>\n            <div id=\"q2\">\n                <p>Life has 4 simple rules:</p>\n                <ol>\n                    <li>A living cell with less than two living neighbours dies.</li>\n                    <li>A living cell with two or three live neighbours lives.</li>\n                    <li>A living cell with more than three live neighbours dies.</li>\n                    <li>A dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\n                </ol>\n            </div>\n            </Collapse>\n            </div> */}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}