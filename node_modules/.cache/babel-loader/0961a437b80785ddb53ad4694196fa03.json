{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // import Container from 'react-bootstrap/Container'\n// import Row from 'react-bootstrap/Row'\n// import Col from 'react-bootstrap/Col'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWidth, selectHeight, selectGrid } from './gridSlice';\nimport Cell from './Cell';\nexport default function Grid() {\n  _s();\n\n  const width = useSelector(selectWidth);\n  const height = useSelector(selectHeight);\n  const dispatch = useDispatch(); // initialization\n\n  dispatch({\n    type: 'grid/initializeGridAndNeighbors'\n  });\n  const initialGrid = useSelector(selectGrid); // const initialGrid = []\n  // const livingNeighbors = []\n  // const DIRECTIONS = [[0, 1], [1, 0], [0, -1], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]]\n  // function initializeNeighbors() {\n  //     for (let i=0; i<height; i++) {\n  //         let row = [];\n  //         for (let j=0; j<width; j++) {\n  //             row.push(0)\n  //         }\n  //         livingNeighbors.push(row)\n  //     }\n  // }\n  // initializeNeighbors()\n  // function generateInitialGrid() {\n  //     for (let i=0; i<height; i++) {\n  //         let row = [];\n  //         for (let j=0; j<width; j++) {\n  //             if (Math.random() < 0.05) {\n  //                 // 1 - alive\n  //                 row.push(1)\n  //                 for (let dir in DIRECTIONS) {\n  //                     let x = i+dir[0]\n  //                     let y = j+dir[0]\n  //                     if (x >=0 && y>=0 && x<height && y<width) {\n  //                         livingNeighbors[x][y]++\n  //                     }\n  //                 }\n  //             } else {\n  //                 // 0 - dead\n  //                 row.push(0)\n  //             }\n  //         }\n  //         initialGrid.push(row)\n  //     }\n  // }\n  // generateInitialGrid()\n\n  console.log(grid);\n  const [grid, updateGrid] = useState(initialGrid);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: grid.map(function (row, rowId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((val, colId) => /*#__PURE__*/_jsxDEV(Cell, {\n          life: val,\n          pos: [rowId, colId]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 40\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"KJ9a7+F6nxmTy39HmiiNXSFNRNE=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useSelector];\n});\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Grid.jsx"],"names":["React","useState","useDispatch","useSelector","selectWidth","selectHeight","selectGrid","Cell","Grid","width","height","dispatch","type","initialGrid","console","log","grid","updateGrid","map","row","rowId","val","colId"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;AACA;AACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,UAApC,QAAsD,aAAtD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,QAAMC,KAAK,GAAGN,WAAW,CAACC,WAAD,CAAzB;AACA,QAAMM,MAAM,GAAGP,WAAW,CAACE,YAAD,CAA1B;AACA,QAAMM,QAAQ,GAAGT,WAAW,EAA5B,CAH2B,CAI3B;;AACAS,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAR;AACA,QAAMC,WAAW,GAAGV,WAAW,CAACG,UAAD,CAA/B,CAN2B,CAO3B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AAEA,QAAM,CAACA,IAAD,EAAOC,UAAP,IAAqBhB,QAAQ,CAACY,WAAD,CAAnC;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACKG,IAAI,CAACE,GAAL,CAAS,UAASC,GAAT,EAAcC,KAAd,EAAqB;AAC3B,0BACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,kBACCD,GAAG,CAACD,GAAJ,CACG,CAACG,GAAD,EAAMC,KAAN,kBAAe,QAAC,IAAD;AAAM,UAAA,IAAI,EAAED,GAAZ;AAAiB,UAAA,GAAG,EAAE,CAACD,KAAD,EAAQE,KAAR;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADlB;AADD;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KARA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GA7DuBd,I;UACNL,W,EACCA,W,EACED,W,EAGGC,W;;;KANAK,I","sourcesContent":["import React, { useState } from 'react'\n// import Container from 'react-bootstrap/Container'\n// import Row from 'react-bootstrap/Row'\n// import Col from 'react-bootstrap/Col'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectWidth, selectHeight, selectGrid } from './gridSlice'\nimport Cell from './Cell'\n\nexport default function Grid() {\n    const width = useSelector(selectWidth)\n    const height = useSelector(selectHeight)\n    const dispatch = useDispatch()\n    // initialization\n    dispatch({type: 'grid/initializeGridAndNeighbors'})\n    const initialGrid = useSelector(selectGrid)\n    // const initialGrid = []\n    // const livingNeighbors = []\n    // const DIRECTIONS = [[0, 1], [1, 0], [0, -1], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]]\n\n    // function initializeNeighbors() {\n    //     for (let i=0; i<height; i++) {\n    //         let row = [];\n    //         for (let j=0; j<width; j++) {\n    //             row.push(0)\n    //         }\n    //         livingNeighbors.push(row)\n    //     }\n    // }\n    // initializeNeighbors()\n    // function generateInitialGrid() {\n    //     for (let i=0; i<height; i++) {\n    //         let row = [];\n    //         for (let j=0; j<width; j++) {\n    //             if (Math.random() < 0.05) {\n    //                 // 1 - alive\n    //                 row.push(1)\n    //                 for (let dir in DIRECTIONS) {\n    //                     let x = i+dir[0]\n    //                     let y = j+dir[0]\n    //                     if (x >=0 && y>=0 && x<height && y<width) {\n    //                         livingNeighbors[x][y]++\n    //                     }\n    //                 }\n    //             } else {\n    //                 // 0 - dead\n    //                 row.push(0)\n    //             }\n    //         }\n    //         initialGrid.push(row)\n    //     }\n    // }\n    // generateInitialGrid()\n    console.log(grid)\n    \n    const [grid, updateGrid] = useState(initialGrid)\n    \n    return (\n        <div className=\"container\"> \n            {grid.map(function(row, rowId) {\n                return (\n                    <div className=\"row\">\n                    {row.map(\n                        (val, colId)=> <Cell life={val} pos={[rowId, colId]}/>\n                    )}\n                    </div>\n                    )\n            })}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}