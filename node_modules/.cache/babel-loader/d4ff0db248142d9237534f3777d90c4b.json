{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Cell.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleCell, selectGrid, selectWidth, selectHeight } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectDeadColor, selectLivingColor, selectHeatMap, selectColorGradientArray } from '../color/colorSlice';\nexport default function Cell(props) {\n  _s();\n\n  const isLargeScreen = useMediaQuery({\n    query: '(min-device-width: 992px)'\n  });\n  const dispatch = useDispatch();\n  const grid = useSelector(selectGrid);\n  const width = useSelector(selectWidth);\n  const height = useSelector(selectHeight);\n  const start = useSelector(selectStart);\n  const livingColor = useSelector(selectLivingColor);\n  const deadColor = useSelector(selectDeadColor);\n  const heatMap = useSelector(selectHeatMap);\n  const colorGradientArray = useSelector(selectColorGradientArray); // const squareLength = Math.min(\n  //     (500 / width).toFixed(2),\n  //     (500 / height).toFixed(2)\n  // );\n\n  let colorStyle = {\n    width: `${(500 / width).toFixed(2)}px`,\n    height: `${(500 / height).toFixed(2)}px`\n  };\n\n  function addLifeStatus() {\n    if (grid[props.pos[0]][props.pos[1]] === 1) {\n      colorStyle.backgroundColor = `${livingColor}`;\n    } else if (!heatMap) {\n      colorStyle.backgroundColor = `${deadColor}`;\n    } else {\n      // build heat map for dead cells\n      let val = -Number(grid[props.pos[0]][props.pos[1]]);\n      colorStyle.backgroundColor = `${colorGradientArray[Number(val + 1)]}`;\n    }\n  }\n\n  addLifeStatus();\n\n  function clickCell() {\n    if (!start) {\n      dispatch(toggleCell(props.pos));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gridCol\",\n    style: colorStyle,\n    onClick: () => clickCell()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cell, \"nosjiBxVWgqhDUn9oFcG5m86SiU=\", false, function () {\n  return [useMediaQuery, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Cell.jsx"],"names":["React","useMediaQuery","useDispatch","useSelector","toggleCell","selectGrid","selectWidth","selectHeight","selectStart","selectDeadColor","selectLivingColor","selectHeatMap","selectColorGradientArray","Cell","props","isLargeScreen","query","dispatch","grid","width","height","start","livingColor","deadColor","heatMap","colorGradientArray","colorStyle","toFixed","addLifeStatus","pos","backgroundColor","val","Number","clickCell"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,WAAjC,EAA8CC,YAA9C,QAAkE,aAAlE;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SACIC,eADJ,EAEIC,iBAFJ,EAGIC,aAHJ,EAIIC,wBAJJ,QAKO,qBALP;AAOA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAChC,QAAMC,aAAa,GAAGd,aAAa,CAAC;AAChCe,IAAAA,KAAK,EAAE;AADyB,GAAD,CAAnC;AAGA,QAAMC,QAAQ,GAAGf,WAAW,EAA5B;AACA,QAAMgB,IAAI,GAAGf,WAAW,CAACE,UAAD,CAAxB;AACA,QAAMc,KAAK,GAAGhB,WAAW,CAACG,WAAD,CAAzB;AACA,QAAMc,MAAM,GAAGjB,WAAW,CAACI,YAAD,CAA1B;AACA,QAAMc,KAAK,GAAGlB,WAAW,CAACK,WAAD,CAAzB;AACA,QAAMc,WAAW,GAAGnB,WAAW,CAACO,iBAAD,CAA/B;AACA,QAAMa,SAAS,GAAGpB,WAAW,CAACM,eAAD,CAA7B;AACA,QAAMe,OAAO,GAAGrB,WAAW,CAACQ,aAAD,CAA3B;AACA,QAAMc,kBAAkB,GAAGtB,WAAW,CAACS,wBAAD,CAAtC,CAZgC,CAahC;AACA;AACA;AACA;;AAEA,MAAIc,UAAU,GAAG;AACbP,IAAAA,KAAK,EAAG,GAAE,CAAC,MAAMA,KAAP,EAAcQ,OAAd,CAAsB,CAAtB,CAAyB,IADtB;AAEbP,IAAAA,MAAM,EAAG,GAAE,CAAC,MAAMA,MAAP,EAAeO,OAAf,CAAuB,CAAvB,CAA0B;AAFxB,GAAjB;;AAKA,WAASC,aAAT,GAAyB;AACrB,QAAIV,IAAI,CAACJ,KAAK,CAACe,GAAN,CAAU,CAAV,CAAD,CAAJ,CAAmBf,KAAK,CAACe,GAAN,CAAU,CAAV,CAAnB,MAAqC,CAAzC,EAA4C;AACxCH,MAAAA,UAAU,CAACI,eAAX,GAA8B,GAAER,WAAY,EAA5C;AACH,KAFD,MAEO,IAAI,CAACE,OAAL,EAAc;AACjBE,MAAAA,UAAU,CAACI,eAAX,GAA8B,GAAEP,SAAU,EAA1C;AACH,KAFM,MAEA;AACH;AACA,UAAIQ,GAAG,GAAG,CAACC,MAAM,CAACd,IAAI,CAACJ,KAAK,CAACe,GAAN,CAAU,CAAV,CAAD,CAAJ,CAAmBf,KAAK,CAACe,GAAN,CAAU,CAAV,CAAnB,CAAD,CAAjB;AACAH,MAAAA,UAAU,CAACI,eAAX,GAA8B,GAC1BL,kBAAkB,CAACO,MAAM,CAACD,GAAG,GAAG,CAAP,CAAP,CACrB,EAFD;AAGH;AACJ;;AACDH,EAAAA,aAAa;;AAEb,WAASK,SAAT,GAAqB;AACjB,QAAI,CAACZ,KAAL,EAAY;AACRJ,MAAAA,QAAQ,CAACb,UAAU,CAACU,KAAK,CAACe,GAAP,CAAX,CAAR;AACH;AACJ;;AAED,sBACI;AACI,IAAA,SAAS,EAAC,SADd;AAEI,IAAA,KAAK,EAAEH,UAFX;AAGI,IAAA,OAAO,EAAE,MAAMO,SAAS;AAH5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAlDuBpB,I;UACEZ,a,EAGLC,W,EACJC,W,EACCA,W,EACCA,W,EACDA,W,EACMA,W,EACFA,W,EACFA,W,EACWA,W;;;KAZPU,I","sourcesContent":["import React from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleCell, selectGrid, selectWidth, selectHeight } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport {\n    selectDeadColor,\n    selectLivingColor,\n    selectHeatMap,\n    selectColorGradientArray,\n} from '../color/colorSlice';\n\nexport default function Cell(props) {\n    const isLargeScreen = useMediaQuery({\n        query: '(min-device-width: 992px)'\n    });\n    const dispatch = useDispatch();\n    const grid = useSelector(selectGrid);\n    const width = useSelector(selectWidth);\n    const height = useSelector(selectHeight);\n    const start = useSelector(selectStart);\n    const livingColor = useSelector(selectLivingColor);\n    const deadColor = useSelector(selectDeadColor);\n    const heatMap = useSelector(selectHeatMap);\n    const colorGradientArray = useSelector(selectColorGradientArray);\n    // const squareLength = Math.min(\n    //     (500 / width).toFixed(2),\n    //     (500 / height).toFixed(2)\n    // );\n\n    let colorStyle = {\n        width: `${(500 / width).toFixed(2)}px`,\n        height: `${(500 / height).toFixed(2)}px`,\n    };\n\n    function addLifeStatus() {\n        if (grid[props.pos[0]][props.pos[1]] === 1) {\n            colorStyle.backgroundColor = `${livingColor}`;\n        } else if (!heatMap) {\n            colorStyle.backgroundColor = `${deadColor}`;\n        } else {\n            // build heat map for dead cells\n            let val = -Number(grid[props.pos[0]][props.pos[1]]);\n            colorStyle.backgroundColor = `${\n                colorGradientArray[Number(val + 1)]\n            }`;\n        }\n    }\n    addLifeStatus();\n\n    function clickCell() {\n        if (!start) {\n            dispatch(toggleCell(props.pos));\n        }\n    }\n\n    return (\n        <div\n            className=\"gridCol\"\n            style={colorStyle}\n            onClick={() => clickCell()}></div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}