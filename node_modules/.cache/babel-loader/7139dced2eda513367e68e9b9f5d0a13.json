{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // import Container from 'react-bootstrap/Container'\n// import Row from 'react-bootstrap/Row'\n// import Col from 'react-bootstrap/Col'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectWidth, selectHeight } from './sizeSlice';\nimport Cell from './Cell';\nexport default function Grid() {\n  _s();\n\n  const width = useSelector(selectWidth);\n  const height = useSelector(selectHeight);\n  const initialGrid = [];\n  const livingNeighbors = [];\n\n  function generateInitialGrid() {\n    for (let i = 0; i < height; i++) {\n      let row = [];\n\n      for (let j = 0; j < width; j++) {\n        if (Math.random() < 0.05) {\n          // 1 - alive\n          row.push(1);\n        } else {\n          // 0 - dead\n          row.push(0);\n        }\n      }\n\n      initialGrid.push(row);\n    }\n\n    return initialGrid;\n  }\n\n  generateInitialGrid();\n  const [grid, updateGrid] = useState(initialGrid);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: grid.map(function (row, rowId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((val, colId) => /*#__PURE__*/_jsxDEV(Cell, {\n          life: val\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 40\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"mXq3UGy5tBMV+BNWqJOqQoHx5b8=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/cs5610-assignments/peilin-guo-assignment2/src/Grid.jsx"],"names":["React","useState","useDispatch","useSelector","selectWidth","selectHeight","Cell","Grid","width","height","initialGrid","livingNeighbors","generateInitialGrid","i","row","j","Math","random","push","grid","updateGrid","map","rowId","val","colId"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;AACA;AACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,aAA1C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,QAAMC,KAAK,GAAGL,WAAW,CAACC,WAAD,CAAzB;AACA,QAAMK,MAAM,GAAGN,WAAW,CAACE,YAAD,CAA1B;AAEA,QAAMK,WAAW,GAAG,EAApB;AACA,QAAMC,eAAe,GAAG,EAAxB;;AACA,WAASC,mBAAT,GAA+B;AAC3B,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACJ,MAAhB,EAAwBI,CAAC,EAAzB,EAA6B;AACzB,UAAIC,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACP,KAAhB,EAAuBO,CAAC,EAAxB,EAA4B;AACxB,YAAIC,IAAI,CAACC,MAAL,KAAgB,IAApB,EAA0B;AACtB;AACAH,UAAAA,GAAG,CAACI,IAAJ,CAAS,CAAT;AACH,SAHD,MAGO;AACH;AACAJ,UAAAA,GAAG,CAACI,IAAJ,CAAS,CAAT;AACH;AACJ;;AACDR,MAAAA,WAAW,CAACQ,IAAZ,CAAiBJ,GAAjB;AACH;;AACD,WAAOJ,WAAP;AACH;;AACDE,EAAAA,mBAAmB;AACnB,QAAM,CAACO,IAAD,EAAOC,UAAP,IAAqBnB,QAAQ,CAACS,WAAD,CAAnC;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACKS,IAAI,CAACE,GAAL,CAAS,UAASP,GAAT,EAAcQ,KAAd,EAAqB;AAC3B,0BACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,kBACCR,GAAG,CAACO,GAAJ,CACG,CAACE,GAAD,EAAMC,KAAN,kBAAe,QAAC,IAAD;AAAM,UAAA,IAAI,EAAED;AAAZ;AAAA;AAAA;AAAA;AAAA,gBADlB;AADD;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KARA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GAtCuBhB,I;UACNJ,W,EACCA,W;;;KAFKI,I","sourcesContent":["import React, { useState } from 'react'\n// import Container from 'react-bootstrap/Container'\n// import Row from 'react-bootstrap/Row'\n// import Col from 'react-bootstrap/Col'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectWidth, selectHeight } from './sizeSlice'\nimport Cell from './Cell'\n\nexport default function Grid() {\n    const width = useSelector(selectWidth)\n    const height = useSelector(selectHeight)\n\n    const initialGrid = []\n    const livingNeighbors = []\n    function generateInitialGrid() {\n        for (let i=0; i<height; i++) {\n            let row = [];\n            for (let j=0; j<width; j++) {\n                if (Math.random() < 0.05) {\n                    // 1 - alive\n                    row.push(1)\n                } else {\n                    // 0 - dead\n                    row.push(0)\n                }\n            }\n            initialGrid.push(row)\n        }\n        return initialGrid\n    }\n    generateInitialGrid()\n    const [grid, updateGrid] = useState(initialGrid)\n    \n    return (\n        <div className=\"container\"> \n            {grid.map(function(row, rowId) {\n                return (\n                    <div className=\"row\">\n                    {row.map(\n                        (val, colId)=> <Cell life={val}/>\n                    )}\n                    </div>\n                    )\n            })}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}