{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectGrid // selectWidth,\n// selectHeight,\n, updateGridAndNeighbors, setCellSize } from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectSpeed } from '../speed/speedSlice';\nimport Cell from './Cell';\nimport './grid.css';\nexport default function Grid() {\n  _s();\n\n  const isLG = useMediaQuery({\n    query: '(min-device-width: 1200px)'\n  });\n  const isMD = useMediaQuery({\n    query: '(min-device-width: 992px)'\n  });\n  const isSM = useMediaQuery({\n    query: '(min-device-width: 768px)'\n  });\n  const isXS = useMediaQuery({\n    query: '(min-device-width: 500px)'\n  });\n\n  const setLength = () => {\n    let gridLength;\n\n    if (isLG) {\n      gridLength = 700;\n    } else if (isMD) {\n      gridLength = 600;\n    } else if (isSM) {\n      gridLength = 500;\n    } else if (isXS) {\n      gridLength = 400;\n    } else {\n      gridLength = 300;\n    }\n\n    return gridLength;\n  };\n\n  const grid = useSelector(selectGrid);\n  const start = useSelector(selectStart);\n  const speed = useSelector(selectSpeed); // const width = useSelector(selectWidth);\n  // const height = useSelector(selectHeight);\n  // const cellWidth = useSelector(selectCellWidth);\n  // const cellHeight = useSelector(selectCellHeight);\n  // const [cellWidth, setCellWidth] = useState((setLength() / width).toFixed(2));\n  // const [cellHeight, setCellHeight] = useState((setLength() / height).toFixed(2));\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (start) {\n        dispatch(updateGridAndNeighbors());\n      }\n    }, Number(speed));\n\n    const handleResize = () => {\n      console.log(\"handle resize\"); // setWindowWidth(window.innerWidth);\n\n      let gridLength = setLength;\n      console.log(gridLength());\n      dispatch(setCellSize(gridLength)); // setCellWidth(computeCellLength(gridLength, width));\n      // setCellHeight(computeCellLength(gridLength, height));\n      // setSizeStyle({\n      //     width: `${cellWidth}px`,\n      //     height: `${cellHeight}px`,\n      // });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return _ => {\n      window.removeEventListener('resize', handleResize);\n      clearTimeout(timer);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flexRow\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gridContainer\",\n      children: grid.map(function (row, rowId) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gridRow\",\n          children: row.map((val, colId) => /*#__PURE__*/_jsxDEV(Cell, {\n            pos: [rowId, colId]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"HsK8lr1eBtasG9QvHk3ePZrduXE=\", false, function () {\n  return [useMediaQuery, useMediaQuery, useMediaQuery, useMediaQuery, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/peilinguo/Documents/NEU/cs5610/peilin-guo-assignment2/src/game/grid/Grid.jsx"],"names":["React","useEffect","useMediaQuery","useDispatch","useSelector","selectGrid","updateGridAndNeighbors","setCellSize","selectStart","selectSpeed","Cell","Grid","isLG","query","isMD","isSM","isXS","setLength","gridLength","grid","start","speed","dispatch","timer","setTimeout","Number","handleResize","console","log","window","addEventListener","_","removeEventListener","clearTimeout","map","row","rowId","val","colId"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    selectGrid,\n    // selectWidth,\n    // selectHeight,\n    updateGridAndNeighbors,\n    setCellSize,\n} from './gridSlice';\nimport { selectStart } from '../buttons/gameStateSlice';\nimport { selectSpeed } from '../speed/speedSlice';\nimport Cell from './Cell';\nimport './grid.css';\n\nexport default function Grid() {\n    const isLG = useMediaQuery({\n        query: '(min-device-width: 1200px)'\n    });\n    const isMD = useMediaQuery({\n        query: '(min-device-width: 992px)'\n    });\n    const isSM = useMediaQuery({\n        query: '(min-device-width: 768px)'\n    });\n    const isXS = useMediaQuery({\n        query: '(min-device-width: 500px)'\n    });\n\n    const setLength = () => {\n        let gridLength;\n        if (isLG) {\n            gridLength = 700;\n        } else if (isMD) {\n            gridLength = 600;\n        } else if (isSM) {\n            gridLength = 500;\n        } else if (isXS) {\n            gridLength = 400;\n        } else {\n            gridLength = 300;\n        }\n        return gridLength;\n    };\n\n    const grid = useSelector(selectGrid);\n    const start = useSelector(selectStart);\n    const speed = useSelector(selectSpeed);\n    // const width = useSelector(selectWidth);\n    // const height = useSelector(selectHeight);\n    // const cellWidth = useSelector(selectCellWidth);\n    // const cellHeight = useSelector(selectCellHeight);\n    // const [cellWidth, setCellWidth] = useState((setLength() / width).toFixed(2));\n    // const [cellHeight, setCellHeight] = useState((setLength() / height).toFixed(2));\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            if (start) {\n                dispatch(updateGridAndNeighbors());\n            }\n        }, Number(speed));\n        const handleResize = () => {\n            console.log(\"handle resize\");\n            // setWindowWidth(window.innerWidth);\n            let gridLength = setLength;\n            console.log(gridLength());\n            dispatch(setCellSize(gridLength));\n            // setCellWidth(computeCellLength(gridLength, width));\n            // setCellHeight(computeCellLength(gridLength, height));\n            // setSizeStyle({\n            //     width: `${cellWidth}px`,\n            //     height: `${cellHeight}px`,\n            // });\n        };\n        window.addEventListener('resize', handleResize);\n        return _ => {\n            window.removeEventListener('resize', handleResize);\n            clearTimeout(timer);\n        };\n    });\n\n    return (\n        <div className=\"flexRow\">\n            <div className=\"gridContainer\">\n                {grid.map(function (row, rowId) {\n                    return (\n                        <div className=\"gridRow\">\n                            {row.map((val, colId) => (\n                                <Cell pos={[rowId, colId]} />\n                            ))}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}